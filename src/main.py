"""–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª Telegram –±–æ—Ç–∞"""
import asyncio
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ path –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent.parent))

from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext

from src.config import BOT_TOKEN
from src.handlers import video_handler, animation_handler, photo_handler, photo_ai_handler, settings_handler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)



# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
storage = MemoryStorage()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=storage)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ã –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
dp.include_router(video_handler.router)
dp.include_router(animation_handler.router)
dp.include_router(photo_handler.router)
dp.include_router(photo_ai_handler.router)
dp.include_router(settings_handler.router)


def create_main_menu_keyboard():
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    buttons = [
        {"text": "üìπ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ", "callback": "video"},
        {"text": "üé® –ê–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω—É", "callback": "animation"},
        {"text": "üñºÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ", "callback": "photo"},
        {"text": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "callback": "settings"}
    ]
    
    inline_keyboard = []
    for btn in buttons:
        inline_keyboard.append([
            InlineKeyboardButton(text=btn["text"], callback_data=btn["callback"])
        ])
    
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = create_main_menu_keyboard()
    
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=keyboard
    )


@dp.callback_query(lambda c: c.data == "back_to_menu")
async def back_to_menu(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.answer()
    await state.clear()
    
    keyboard = create_main_menu_keyboard()
    
    await callback.message.answer(
        "üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=keyboard
    )


@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìπ **–°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ** - –ì–µ–Ω–µ—Ä–∏—Ä—É–π –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ AI
üé® **–ê–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω—É** - –û–∂–∏–≤–∏ –∫–∞—Ä—Ç–∏–Ω—É —Å –ø–æ–º–æ—â—å—é AI
üñºÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ** - –†–µ–¥–∞–∫—Ç–∏—Ä—É–π –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–π —Ñ–æ—Ç–æ

–ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    """
    await message.answer(help_text)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())