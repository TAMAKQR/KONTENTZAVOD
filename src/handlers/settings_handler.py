"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º—Ç–∞–º–∏"""
import logging
import sys
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from aiogram import Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from src.prompts_config import prompts_manager

logger = logging.getLogger(__name__)
router = Router()


class SettingsStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    viewing_prompts = State()
    choosing_prompt_to_edit = State()
    editing_prompt = State()


@router.callback_query(lambda c: c.data == "settings")
async def open_settings(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    await callback.answer()
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–º—Ç—ã", callback_data="view_prompts")],
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º—Ç", callback_data="edit_prompt_menu")],
            [InlineKeyboardButton(text="üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ", callback_data="reset_prompts")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
    )
    
    await callback.message.answer(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –ø—Ä–æ–º—Ç–∞–º–∏ –¥–ª—è –ò–ò:",
        parse_mode="HTML",
        reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data == "view_prompts")
async def view_prompts(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –ø—Ä–æ–º—Ç—ã"""
    await callback.answer()
    
    prompts = prompts_manager.get_all_prompts()
    
    text = "üìã <b>–¢–µ–∫—É—â–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º—Ç—ã:</b>\n\n"
    
    for i, (key, value) in enumerate(prompts.items(), 1):
        preview = value[:100].replace('\n', ' ')
        if len(value) > 100:
            preview += "..."
        
        text += f"<b>{i}. {key}</b>\n"
        text += f"<code>{preview}</code>\n\n"
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_prompt_menu")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings")]
        ]
    )
    
    await callback.message.answer(
        text,
        parse_mode="HTML",
        reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data == "edit_prompt_menu")
async def edit_prompt_menu(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–º—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await callback.answer()
    
    prompts = prompts_manager.get_all_prompts()
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=f"‚úèÔ∏è {key[:30]}", 
                callback_data=f"edit_prompt:{key}"
            )] for key in prompts.keys()
        ] + [
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings")]
        ]
    )
    
    await callback.message.answer(
        "‚úèÔ∏è <b>–í—ã–±–µ—Ä–∏ –ø—Ä–æ–º—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>",
        parse_mode="HTML",
        reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data.startswith("edit_prompt:"))
async def select_prompt_to_edit(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞–Ω –ø—Ä–æ–º—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await callback.answer()
    
    prompt_key = callback.data.split(":", 1)[1]
    prompt_value = prompts_manager.get_prompt(prompt_key)
    
    await state.update_data(editing_prompt_key=prompt_key)
    await state.set_state(SettingsStates.editing_prompt)
    
    text = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º—Ç–∞:</b> <code>{prompt_key}</code>\n\n"
    text += f"<b>–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b>\n<code>{prompt_value}</code>\n\n"
    text += "–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–º—Ç–∞ (–∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã):"
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç", callback_data=f"reset_prompt:{prompt_key}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="edit_prompt_menu")]
        ]
    )
    
    await callback.message.answer(
        text,
        parse_mode="HTML",
        reply_markup=keyboard
    )


@router.message(SettingsStates.editing_prompt)
async def save_edited_prompt(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º—Ç"""
    data = await state.get_data()
    prompt_key = data.get("editing_prompt_key")
    
    new_value = message.text
    
    if prompts_manager.set_prompt(prompt_key, new_value):
        await message.answer(
            f"‚úÖ <b>–ü—Ä–æ–º—Ç –æ–±–Ω–æ–≤–ª—ë–Ω!</b>\n\n"
            f"–ö–ª—é—á: <code>{prompt_key}</code>\n"
            f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <code>{new_value[:100]}...</code>",
            parse_mode="HTML"
        )
    else:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–º—Ç–∞",
            parse_mode="HTML"
        )
    
    await state.clear()


@router.callback_query(lambda c: c.data.startswith("reset_prompt:"))
async def reset_single_prompt(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–¥–∏–Ω –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–æ–º—Ç"""
    await callback.answer()
    
    prompt_key = callback.data.split(":", 1)[1]
    
    if prompts_manager.reset_prompt(prompt_key):
        await callback.message.answer(
            f"‚úÖ <b>–ü—Ä–æ–º—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
            f"–ö–ª—é—á: <code>{prompt_key}</code>",
            parse_mode="HTML"
        )
    else:
        await callback.message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–º—Ç–∞",
            parse_mode="HTML"
        )
    
    await state.clear()


@router.callback_query(lambda c: c.data == "reset_prompts")
async def reset_all_prompts(callback: types.CallbackQuery):
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø—Ä–æ–º—Ç—ã"""
    await callback.answer()
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="confirm_reset")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="settings")]
        ]
    )
    
    await callback.message.answer(
        "‚ö†Ô∏è <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã?</b>\n\n"
        "–í—Å–µ –ø—Ä–æ–º—Ç—ã –±—É–¥—É—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!",
        parse_mode="HTML",
        reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data == "confirm_reset")
async def confirm_reset(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–º—Ç–æ–≤"""
    await callback.answer()
    
    if prompts_manager.reset_all():
        await callback.message.answer(
            "‚úÖ <b>–í—Å–µ –ø—Ä–æ–º—Ç—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!</b>",
            parse_mode="HTML"
        )
    else:
        await callback.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–º—Ç–æ–≤",
            parse_mode="HTML"
        )
