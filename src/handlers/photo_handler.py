"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –Ω—É–ª—è"""
import asyncio
import logging
import re
import uuid
import time
import sys
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from aiogram import Router, types, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from generators.photo_generator import PhotoGenerator
from generators.image_utils import ImageUploader
import google.generativeai as genai
from src.config import GEMINI_API_KEY
from integrations.airtable.airtable_logger import session_logger

router = Router()
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Gemini –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
genai.configure(api_key=GEMINI_API_KEY)


def has_cyrillic(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ —Ç–µ–∫—Å—Ç–µ"""
    return bool(re.search('[–∞-—è–ê-–Ø—ë–Å]', text))


async def translate_to_english(text: str) -> str:
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —á–µ—Ä–µ–∑ Gemini"""
    if not text or not has_cyrillic(text):
        return text
    
    try:
        logger.info(f"üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç, –ø–µ—Ä–µ–≤–æ–∂—É: {text[:50]}...")
        
        model = genai.GenerativeModel('gemini-2.0-flash-exp')
        
        prompt = f"""Translate this text from Russian to English. 
Return ONLY the English translation, nothing else.

Text: {text}

Translation:"""
        
        response = model.generate_content(prompt)
        translated = response.text.strip()
        
        logger.info(f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥: {translated}")
        return translated
        
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞, –∏—Å–ø–æ–ª—å–∑—É—é –æ—Ä–∏–≥–∏–Ω–∞–ª: {e}")
        return text


class PhotoStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ç–æ"""
    choosing_mode = State()  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –Ω—É–ª—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    choosing_model = State()  # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ AI
    
    # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –Ω—É–ª—è
    generation_waiting_prompt = State()
    generation_waiting_aspect_ratio = State()
    generation_processing = State()
    
    # –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    editing_waiting_image = State()
    editing_choosing_category = State()
    editing_choosing_function = State()
    editing_waiting_prompt = State()
    editing_processing = State()


@router.callback_query(lambda c: c.data == "photo")
async def start_photo_mode(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ç–æ - –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞"""
    await callback.answer()
    await state.set_state(PhotoStates.choosing_mode)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ú® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –Ω—É–ª—è", callback_data="photo_generate")],
            [InlineKeyboardButton(text="üñºÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ", callback_data="photo_edit")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")],
        ]
    )
    
    await callback.message.answer(
        "üé® **–†–∞–±–æ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏**\n\n"
        "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


# ==================== –ì–ï–ù–ï–†–ê–¶–ò–Ø –° –ù–£–õ–Ø ====================

@router.callback_query(lambda c: c.data == "photo_generate", PhotoStates.choosing_mode)
async def start_generation(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –Ω—É–ª—è - –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏"""
    await callback.answer()
    
    user_id = callback.from_user.id
    session_id = f"photo_{uuid.uuid4().hex[:12]}"
    start_time = time.time()
    
    # üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Airtable
    await session_logger.log_session_start(
        user_id=user_id,
        session_id=session_id,
        video_type="photo"
    )
    
    await state.update_data(mode="generation", session_id=session_id, start_time=start_time, video_type="photo")
    await state.set_state(PhotoStates.choosing_model)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üçå Google Nano Banana", callback_data="model_nano_gen")],
            [InlineKeyboardButton(text="üñºÔ∏è Google Imagen 4", callback_data="model_imagen_gen")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_photo_menu")],
        ]
    )
    
    await callback.message.answer(
        "‚ú® **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –Ω—É–ª—è**\n\n"
        "–í—ã–±–µ—Ä–∏ AI –º–æ–¥–µ–ª—å:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@router.callback_query(lambda c: c.data.startswith("model_") and c.data.endswith("_gen"), PhotoStates.choosing_model)
async def choose_generation_model(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    await callback.answer()
    
    model_map = {
        "model_nano_gen": "google/nano-banana",
        "model_imagen_gen": "google/imagen-4"
    }
    
    model = model_map.get(callback.data)
    await state.update_data(model=model)
    await state.set_state(PhotoStates.generation_waiting_prompt)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_photo_menu")]]
    )
    
    model_name = "Nano Banana üçå" if "nano" in callback.data else "Imagen 4 üñºÔ∏è"
    
    await callback.message.answer(
        f"üì¶ **–ú–æ–¥–µ–ª—å**: {model_name}\n\n"
        f"üìù –ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å:\n\n"
        f"_–ü—Ä–∏–º–µ—Ä—ã:_\n"
        f"‚Ä¢ –§—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –≥–æ—Ä–æ–¥ –Ω–∞ –∑–∞–∫–∞—Ç–µ\n"
        f"‚Ä¢ –ö–æ—Ç –≤ –∫–æ—Å—Ç—é–º–µ –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∞\n"
        f"‚Ä¢ –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ –≤ —Å—Ç–∏–ª–µ –∫—É–±–∏–∑–º–∞\n\n"
        f"üí° –ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º - —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–µ–¥—ë—Ç!",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@router.message(PhotoStates.generation_waiting_prompt)
async def process_generation_prompt(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–∏—Ä–∏–ª–ª–∏—Ü–∞
    prompt = await translate_to_english(message.text)
    await state.update_data(prompt=prompt)
    await state.set_state(PhotoStates.generation_waiting_aspect_ratio)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üì± 9:16 (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ)", callback_data="aspect_9:16")],
            [InlineKeyboardButton(text="üñ•Ô∏è 16:9 (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ)", callback_data="aspect_16:9")],
            [InlineKeyboardButton(text="‚¨õ 1:1 (–∫–≤–∞–¥—Ä–∞—Ç)", callback_data="aspect_1:1")],
            [InlineKeyboardButton(text="üìê 3:4", callback_data="aspect_3:4")],
            [InlineKeyboardButton(text="üìê 4:3", callback_data="aspect_4:3")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_photo_menu")],
        ]
    )
    
    await message.answer(
        "üìê **–í—ã–±–µ—Ä–∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω:**",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@router.callback_query(lambda c: c.data.startswith("aspect_"), PhotoStates.generation_waiting_aspect_ratio)
async def process_aspect_ratio(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω –∏ –∑–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    await callback.answer()
    
    aspect_ratio = callback.data.replace("aspect_", "")
    await state.update_data(aspect_ratio=aspect_ratio)
    await state.set_state(PhotoStates.generation_processing)
    
    data = await state.get_data()
    prompt = data.get("prompt", "")
    model = data.get("model", "google/nano-banana")
    
    status_msg = await callback.message.answer(
        f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...\n\n"
        f"üìù –ü—Ä–æ–º—Ç: {prompt[:100]}...\n"
        f"üìê –§–æ—Ä–º–∞—Ç: {aspect_ratio}\n"
        f"ü§ñ –ú–æ–¥–µ–ª—å: {model}\n\n"
        f"‚è∞ –≠—Ç–æ –∑–∞–π–º–µ—Ç 30-60 —Å–µ–∫—É–Ω–¥..."
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    try:
        generator = PhotoGenerator()
        
        result = await generator._generate_single_photo(
            prompt=prompt,
            aspect_ratio=aspect_ratio,
            reference_image_url=None,
            scene_index=0
        )
        
        if result["status"] == "success":
            photo_url = result["photo_url"]
            
            await status_msg.edit_text(
                f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!\n\n"
                f"üîó URL: {photo_url}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
            await callback.message.answer_photo(
                photo=photo_url,
                caption=f"üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {prompt[:100]}..."
            )
            
            # üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—Ö–∞ –≤ Airtable
            data = await state.get_data()
            session_id = data.get("session_id")
            start_time = data.get("start_time")
            video_type = data.get("video_type")
            if session_id and start_time:
                processing_time = time.time() - start_time
                await session_logger.log_session_complete(
                    session_id=session_id,
                    output_file=photo_url,
                    processing_time_seconds=processing_time,
                    video_type=video_type
                )
            
            await callback.message.answer(
                "‚ú® –•–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –µ—â—ë –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üîÑ –ï—â—ë —Ä–∞–∑", callback_data="photo_generate")],
                        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")],
                    ]
                )
            )
        else:
            error = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            await status_msg.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n\n{error}"
            )
            
            # üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ Airtable
            data = await state.get_data()
            session_id = data.get("session_id")
            video_type = data.get("video_type")
            if session_id:
                await session_logger.log_session_error(
                    session_id=session_id,
                    error_message=error,
                    video_type=video_type
                )
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        await status_msg.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        )
        
        # üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ Airtable
        data = await state.get_data()
        session_id = data.get("session_id")
        video_type = data.get("video_type")
        if session_id:
            await session_logger.log_session_error(
                session_id=session_id,
                error_message=str(e),
                video_type=video_type
            )
    
    await state.clear()


# ==================== –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –§–û–¢–û ====================

@router.callback_query(lambda c: c.data == "photo_edit", PhotoStates.choosing_mode)
async def start_editing(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏"""
    await callback.answer()
    
    user_id = callback.from_user.id
    session_id = f"photo_edit_{uuid.uuid4().hex[:12]}"
    start_time = time.time()
    
    # üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Airtable
    await session_logger.log_session_start(
        user_id=user_id,
        session_id=session_id,
        video_type="photo_edit"
    )
    
    await state.update_data(mode="editing", session_id=session_id, start_time=start_time, video_type="photo_edit")
    await state.set_state(PhotoStates.choosing_model)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üçå Google Nano Banana", callback_data="model_nano_edit")],
            [InlineKeyboardButton(text="üñºÔ∏è Google Imagen 4", callback_data="model_imagen_edit")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_photo_menu")],
        ]
    )
    
    await callback.message.answer(
        "üñºÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ**\n\n"
        "–í—ã–±–µ—Ä–∏ AI –º–æ–¥–µ–ª—å:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@router.callback_query(lambda c: c.data.startswith("model_") and c.data.endswith("_edit"), PhotoStates.choosing_model)
async def choose_editing_model(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await callback.answer()
    
    model_map = {
        "model_nano_edit": "google/nano-banana",
        "model_imagen_edit": "google/imagen-4"
    }
    
    model = model_map.get(callback.data)
    await state.update_data(model=model)
    await state.set_state(PhotoStates.editing_waiting_image)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_photo_menu")]]
    )
    
    model_name = "Nano Banana üçå" if "nano" in callback.data else "Imagen 4 üñºÔ∏è"
    
    await callback.message.answer(
        f"üì¶ **–ú–æ–¥–µ–ª—å**: {model_name}\n\n"
        f"üì§ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@router.message(PhotoStates.editing_waiting_image)
async def process_editing_image(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
    if not message.photo:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        return
    
    status_msg = await message.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ...")
    
    try:
        uploader = ImageUploader()
        file_id = message.photo[-1].file_id
        
        # ‚úÖ –®–ê–ì 1: –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        photo_bytes = await uploader.download_telegram_photo(bot, file_id)
        
        if not photo_bytes:
            await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ")
            return
        
        # ‚úÖ –®–ê–ì 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
        validation = uploader.validate_photo_quality(photo_bytes)
        
        # ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ - –æ—Ç–∫–ª–æ–Ω—è–µ–º —Ñ–æ—Ç–æ
        if not validation["valid"]:
            error_text = "‚ùå **–§–æ—Ç–æ –Ω–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É:**\n\n"
            error_text += "\n\n".join(validation["errors"])
            error_text += "\n\nüí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
            error_text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ç–æ –º–∏–Ω–∏–º—É–º 512x512px\n"
            error_text += "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π —Ñ–æ—Ç–æ –∫–∞–∫ –î–û–ö–£–ú–ï–ù–¢ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞\n"
            error_text += "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 10MB"
            
            await status_msg.edit_text(error_text, parse_mode="Markdown")
            return
        
        # ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è - –ø—Ä–∏–Ω–∏–º–∞–µ–º, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º
        warning_text = ""
        if validation["warnings"]:
            warning_text = "\n\n‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:**\n"
            warning_text += "\n".join(validation["warnings"])
        
        # ‚úÖ –®–ê–ì 3: –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        await status_msg.edit_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–æ—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")
        image_url = await uploader.upload_to_replicate(photo_bytes)
        
        if not image_url:
            await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ")
            return
        
        await state.update_data(image_url=image_url)
        await state.set_state(PhotoStates.editing_choosing_category)
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ú® –£–ª—É—á—à–µ–Ω–∏–µ", callback_data="cat_enhance")],
                [InlineKeyboardButton(text="üé® –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è", callback_data="cat_style")],
                [InlineKeyboardButton(text="üåà –¶–≤–µ—Ç–∞ –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞", callback_data="cat_color")],
                [InlineKeyboardButton(text="üîÑ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏", callback_data="cat_transform")],
                [InlineKeyboardButton(text="üìê –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ", callback_data="cat_technical")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_photo_menu")],
            ]
        )
        
        success_text = (
            f"‚úÖ **–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!**\n\n"
            f"üìä **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**\n"
            f"‚Ä¢ –†–∞–∑–º–µ—Ä: {validation['width']}x{validation['height']}px\n"
            f"‚Ä¢ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {validation['aspect_ratio']}\n"
            f"‚Ä¢ –§–∞–π–ª: {validation['file_size_mb']}MB"
            f"{warning_text}\n\n"
            f"–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
        )
        
        await status_msg.edit_text(
            success_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


# ==================== –ö–ê–¢–ï–ì–û–†–ò–ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø ====================

@router.callback_query(lambda c: c.data.startswith("cat_"), PhotoStates.editing_choosing_category)
async def choose_editing_category(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await callback.answer()
    
    category = callback.data.replace("cat_", "")
    await state.update_data(category=category)
    await state.set_state(PhotoStates.editing_choosing_function)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    functions = {
        "enhance": {
            "title": "‚ú® –£–ª—É—á—à–µ–Ω–∏–µ",
            "options": [
                ("–ü–æ–≤—ã—Å–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ (4K)", "func_upscale"),
                ("–£–±—Ä–∞—Ç—å —à—É–º", "func_denoise"),
                ("–ü–æ–≤—ã—Å–∏—Ç—å —Ä–µ–∑–∫–æ—Å—Ç—å", "func_sharpen"),
                ("–û–±—â–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ", "func_enhance_general"),
            ]
        },
        "style": {
            "title": "üé® –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è",
            "options": [
                ("üñåÔ∏è –ú–∞—Å–ª–æ –Ω–∞ —Ö–æ–ª—Å—Ç–µ", "func_oil_painting"),
                ("üíß –ê–∫–≤–∞—Ä–µ–ª—å", "func_watercolor"),
                ("üé≠ –ê–Ω–∏–º–µ —Å—Ç–∏–ª—å", "func_anime"),
                ("üåÉ –ö–∏–±–µ—Ä–ø–∞–Ω–∫", "func_cyberpunk"),
                ("üé¨ –ö–∏–Ω–æ—à–Ω—ã–π —Å—Ç–∏–ª—å", "func_cinematic"),
                ("üîÆ –§—ç–Ω—Ç–µ–∑–∏", "func_fantasy"),
                ("üì± Pixel Art", "func_pixel_art"),
                ("üéÆ 3D Render", "func_3d_render"),
                ("üñºÔ∏è –ì—Ä–∞—Ñ—Ñ–∏—Ç–∏", "func_graffiti"),
            ]
        },
        "color": {
            "title": "üåà –¶–≤–µ—Ç–∞ –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞",
            "options": [
                ("üåÖ –¢–µ–ø–ª—ã–µ —Ç–æ–Ω–∞", "func_warm"),
                ("‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω—ã–µ —Ç–æ–Ω–∞", "func_cold"),
                ("‚ö´ –ß–µ—Ä–Ω–æ-–±–µ–ª–æ–µ", "func_bw"),
                ("üì∫ –í–∏–Ω—Ç–∞–∂/—Ä–µ—Ç—Ä–æ", "func_vintage"),
                ("üåô –î–µ–Ω—å ‚Üí –ù–æ—á—å", "func_to_night"),
                ("‚òÄÔ∏è –ù–æ—á—å ‚Üí –î–µ–Ω—å", "func_to_day"),
                ("‚ùÑÔ∏è –õ–µ—Ç–æ ‚Üí –ó–∏–º–∞", "func_to_winter"),
                ("üå∏ –ó–∏–º–∞ ‚Üí –í–µ—Å–Ω–∞", "func_to_spring"),
            ]
        },
        "transform": {
            "title": "üîÑ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏",
            "options": [
                ("üèûÔ∏è –°–º–µ–Ω–∏—Ç—å —Ñ–æ–Ω", "func_change_bg"),
                ("üåü –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã", "func_add_elements"),
                ("üó∫Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", "func_change_location"),
                ("üëó –ò–∑–º–µ–Ω–∏—Ç—å –æ–¥–µ–∂–¥—É", "func_change_clothes"),
                ("ü¶∏ –ö–æ—Å–ø–ª–µ–π/–∫–æ—Å—Ç—é–º", "func_cosplay"),
                ("üé≠ –ò–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", "func_change_character"),
            ]
        },
        "technical": {
            "title": "üìê –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ",
            "options": [
                ("üìê –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –Ω–∞ 16:9", "func_format_16_9"),
                ("üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –Ω–∞ 9:16", "func_format_9_16"),
                ("‚¨õ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –Ω–∞ 1:1", "func_format_1_1"),
                ("üìè –†–∞—Å—à–∏—Ä–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã", "func_outpaint"),
                ("üéØ –†–∞–∑–º—ã—Ç—å —Ñ–æ–Ω (Bokeh)", "func_bokeh"),
                ("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç", "func_remove_object"),
            ]
        }
    }
    
    category_data = functions.get(category, {})
    title = category_data.get("title", "–§—É–Ω–∫—Ü–∏–∏")
    options = category_data.get("options", [])
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏
    keyboard_buttons = [[InlineKeyboardButton(text=name, callback_data=code)] for name, code in options]
    keyboard_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await callback.message.answer(
        f"{title}\n\n–í—ã–±–µ—Ä–∏ —Ñ—É–Ω–∫—Ü–∏—é:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@router.callback_query(lambda c: c.data.startswith("func_"), PhotoStates.editing_choosing_function)
async def choose_editing_function(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await callback.answer()
    
    function = callback.data.replace("func_", "")
    await state.update_data(function=function)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–º—Ç
    no_prompt_functions = [
        "upscale", "denoise", "sharpen", "enhance_general",
        "bw", "warm", "cold", "to_night", "to_day", "to_winter", "to_spring",
        "bokeh", "format_16_9", "format_9_16", "format_1_1"
    ]
    
    if function in no_prompt_functions:
        # –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –±–µ–∑ –ø—Ä–æ–º—Ç–∞
        await state.set_state(PhotoStates.editing_processing)
        await process_editing_without_prompt(callback, state)
    else:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–º—Ç
        await state.set_state(PhotoStates.editing_waiting_prompt)
        
        prompt_hints = {
            "change_bg": "–û–ø–∏—à–∏ –Ω–æ–≤—ã–π —Ñ–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ø–ª—è–∂ –Ω–∞ –∑–∞–∫–∞—Ç–µ', '–∫–æ—Å–º–æ—Å —Å –ø–ª–∞–Ω–µ—Ç–∞–º–∏')",
            "add_elements": "–û–ø–∏—à–∏ —á—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–±–∞–±–æ—á–∫–∏ –≤–æ–∫—Ä—É–≥', '–º–∞–≥–∏—á–µ—Å–∫–∏–µ –∏—Å–∫—Ä—ã')",
            "change_location": "–û–ø–∏—à–∏ –Ω–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ü–∞—Ä–∏–∂, –≠–π—Ñ–µ–ª–µ–≤–∞ –±–∞—à–Ω—è', '—Ç—Ä–æ–ø–∏—á–µ—Å–∫–∏–π –ª–µ—Å')",
            "change_clothes": "–û–ø–∏—à–∏ –Ω–æ–≤—É—é –æ–¥–µ–∂–¥—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–≤–µ—á–µ—Ä–Ω–µ–µ –ø–ª–∞—Ç—å–µ', '—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ—Å—Ç—é–º')",
            "cosplay": "–û–ø–∏—à–∏ –∫–æ—Å—Ç—é–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: '—Å—É–ø–µ—Ä–≥–µ—Ä–æ–π Marvel', '—Å—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—ã–π —Ä—ã—Ü–∞—Ä—å')",
            "change_character": "–û–ø–∏—à–∏ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '—ç–ª—å—Ñ', '–∫–∏–±–æ—Ä–≥')",
            "outpaint": "–û–ø–∏—à–∏ —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–µ–π–∑–∞–∂–∞', '–∫–æ—Å–º–æ—Å')",
            "remove_object": "–û–ø–∏—à–∏ —á—Ç–æ —É–±—Ä–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: '—á–µ–ª–æ–≤–µ–∫ —Å–ª–µ–≤–∞', '–º–∞—à–∏–Ω–∞ –Ω–∞ —Ñ–æ–Ω–µ')",
            # –°—Ç–∏–ª–∏
            "oil_painting": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)",
            "watercolor": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)",
            "anime": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)",
            "cyberpunk": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)",
            "cinematic": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)",
            "fantasy": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)",
            "pixel_art": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)",
            "3d_render": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)",
            "graffiti": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)",
            "vintage": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)",
        }
        
        hint = prompt_hints.get(function, "–û–ø–∏—à–∏ –∂–µ–ª–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–º—Ç (–¥–ª—è —Å—Ç–∏–ª–µ–π)
        optional_prompt_functions = [
            "oil_painting", "watercolor", "anime", "cyberpunk", "cinematic",
            "fantasy", "pixel_art", "3d_render", "graffiti", "vintage"
        ]
        
        buttons = []
        if function in optional_prompt_functions:
            buttons.append([InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_prompt")])
        buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_categories")])
        
        await callback.message.answer(
            f"üìù {hint}\n\n"
            f"üí° **–ü–æ–¥—Å–∫–∞–∑–∫–∞:**\n"
            f"‚Ä¢ –ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –Ω–∞ **—Ä—É—Å—Å–∫–æ–º** - —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–µ–¥—ë—Ç\n"
            f"‚Ä¢ –î–ª—è —Å—Ç–∏–ª–µ–π –º–æ–∂–Ω–æ –Ω–∞–∂–∞—Ç—å \"–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å\" - –±–∞–∑–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç —É–∂–µ –≤—Å—Ç—Ä–æ–µ–Ω",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )


@router.callback_query(lambda c: c.data == "skip_prompt")
async def skip_prompt_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"""
    await callback.answer("‚úÖ –ü—Ä–æ–º—Ç –ø—Ä–æ–ø—É—â–µ–Ω")
    await state.update_data(user_prompt="")
    await state.set_state(PhotoStates.editing_processing)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π –æ–±—ä–µ–∫—Ç message –∏–∑ callback
    class FakeMessage:
        def __init__(self, callback):
            self.chat = callback.message.chat
            self.message_id = callback.message.message_id
            self._callback = callback
            
        async def answer(self, text, **kwargs):
            return await self._callback.message.answer(text, **kwargs)
        
        async def answer_photo(self, photo, **kwargs):
            return await self._callback.message.answer_photo(photo, **kwargs)
    
    fake_message = FakeMessage(callback)
    await execute_editing(fake_message, state)


@router.message(PhotoStates.editing_waiting_prompt)
async def process_editing_with_prompt(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–º—Ç–∞: -, _, –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    text = message.text.strip() if message.text else ""
    
    if text in ["-", "_", ""]:
        user_prompt = ""
    else:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–∏—Ä–∏–ª–ª–∏—Ü–∞
        user_prompt = await translate_to_english(text)
    
    await state.update_data(user_prompt=user_prompt)
    await state.set_state(PhotoStates.editing_processing)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    await execute_editing(message, state)


async def process_editing_without_prompt(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º—Ç–∞"""
    await state.update_data(user_prompt="")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π –æ–±—ä–µ–∫—Ç message –∏–∑ callback
    class FakeMessage:
        def __init__(self, callback):
            self.chat = callback.message.chat
            self.message_id = callback.message.message_id
            self._callback = callback
            
        async def answer(self, text, **kwargs):
            return await self._callback.message.answer(text, **kwargs)
        
        async def answer_photo(self, photo, **kwargs):
            return await self._callback.message.answer_photo(photo, **kwargs)
    
    fake_message = FakeMessage(callback)
    await execute_editing(fake_message, state)


async def execute_editing(message, state: FSMContext):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ"""
    data = await state.get_data()
    function = data.get("function", "")
    user_prompt = data.get("user_prompt", "")
    image_url = data.get("image_url", "")
    model = data.get("model", "google/nano-banana")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏
    prompt = create_editing_prompt(function, user_prompt)
    
    status_msg = await message.answer(
        f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ...\n\n"
        f"üîß –§—É–Ω–∫—Ü–∏—è: {get_function_name(function)}\n"
        f"ü§ñ –ú–æ–¥–µ–ª—å: {model}\n\n"
        f"‚è∞ –≠—Ç–æ –∑–∞–π–º–µ—Ç 30-60 —Å–µ–∫—É–Ω–¥..."
    )
    
    try:
        generator = PhotoGenerator()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º aspect_ratio –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
        aspect_ratio_map = {
            "format_16_9": "16:9",
            "format_9_16": "9:16",
            "format_1_1": "1:1"
        }
        aspect_ratio = aspect_ratio_map.get(function, "match_input_image")
        
        result = await generator._generate_single_photo(
            prompt=prompt,
            aspect_ratio=aspect_ratio,
            reference_image_url=image_url,
            scene_index=0
        )
        
        if result["status"] == "success":
            photo_url = result["photo_url"]
            
            await status_msg.edit_text(
                f"‚úÖ –§–æ—Ç–æ –≥–æ—Ç–æ–≤–æ!\n\n"
                f"üîó URL: {photo_url}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await message.answer_photo(
                photo=photo_url,
                caption=f"üé® {get_function_name(function)}"
            )
            
            await message.answer(
                "‚ú® –•–æ—á–µ—à—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë?",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üîÑ –ï—â—ë —Ä–∞–∑", callback_data="photo_edit")],
                        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")],
                    ]
                )
            )
        else:
            error = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            await status_msg.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞:\n\n{error}"
            )
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await status_msg.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        )
    
    await state.clear()


def create_editing_prompt(function: str, user_prompt: str = "") -> str:
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
    
    prompts = {
        # –£–ª—É—á—à–µ–Ω–∏–µ
        "upscale": "Improve image quality, enhance details, 4K resolution, sharp, high quality",
        "denoise": "Remove noise, clean image, smooth, professional quality",
        "sharpen": "Sharpen image, enhance edges, increase clarity, detailed",
        "enhance_general": "Enhance overall quality, improve colors, better lighting, professional look",
        
        # –°—Ç–∏–ª–∏
        "oil_painting": f"Transform into oil painting style, artistic, painterly texture, brush strokes. {user_prompt}",
        "watercolor": f"Transform into watercolor painting, soft edges, artistic, flowing colors. {user_prompt}",
        "anime": f"Transform into anime art style, manga style, cel shaded, vibrant colors. {user_prompt}",
        "cyberpunk": f"Transform into cyberpunk style, neon lights, futuristic, dark atmosphere, tech noir. {user_prompt}",
        "cinematic": f"Transform into cinematic look, film grain, color grading, dramatic lighting, movie style. {user_prompt}",
        "fantasy": f"Transform into fantasy art, magical atmosphere, ethereal, mystical, enchanted. {user_prompt}",
        "pixel_art": f"Transform into pixel art style, 8-bit, retro game graphics, pixelated. {user_prompt}",
        "3d_render": f"Transform into 3D render, CGI style, smooth surfaces, professional 3D graphics. {user_prompt}",
        "graffiti": f"Transform into graffiti street art style, urban, spray paint effect, bold colors. {user_prompt}",
        
        # –¶–≤–µ—Ç–∞
        "warm": "Add warm color tones, golden hour lighting, warm atmosphere, cozy feeling",
        "cold": "Add cold color tones, blue atmosphere, cool temperature, winter feeling",
        "bw": "Transform to black and white, monochrome, high contrast, artistic",
        "vintage": f"Add vintage effect, retro look, film grain, aged photo, nostalgic atmosphere. {user_prompt}",
        "to_night": "Transform to night time, dark atmosphere, moonlight, stars, night scene",
        "to_day": "Transform to day time, bright sunlight, clear sky, daytime atmosphere",
        "to_winter": "Transform to winter season, snow, cold atmosphere, winter landscape",
        "to_spring": "Transform to spring season, flowers blooming, fresh greenery, spring atmosphere",
        
        # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
        "change_bg": f"Replace background with: {user_prompt}. Keep main subject, new background",
        "add_elements": f"Add to the image: {user_prompt}. Seamlessly integrate new elements",
        "change_location": f"Place subject in new location: {user_prompt}. Change environment, keep subject",
        "change_clothes": f"Change clothing to: {user_prompt}. New outfit, same person",
        "cosplay": f"Transform into cosplay: {user_prompt}. Costume, character transformation",
        "change_character": f"Transform character into: {user_prompt}. New character design",
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ
        "format_16_9": "Extend to 16:9 aspect ratio, seamless expansion, natural continuation",
        "format_9_16": "Extend to 9:16 aspect ratio, vertical format, seamless expansion",
        "format_1_1": "Reframe to 1:1 square aspect ratio, balanced composition",
        "outpaint": f"Extend image borders, continue scene naturally: {user_prompt}",
        "bokeh": "Add bokeh effect, blur background, focus on subject, shallow depth of field, professional photography",
        "remove_object": f"Remove from image: {user_prompt}. Clean removal, seamless inpainting",
    }
    
    return prompts.get(function, f"Transform image: {user_prompt}")


def get_function_name(function: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ–µ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏"""
    
    names = {
        "upscale": "–ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞",
        "denoise": "–£–±—Ä–∞—Ç—å —à—É–º",
        "sharpen": "–ü–æ–≤—ã—à–µ–Ω–∏–µ —Ä–µ–∑–∫–æ—Å—Ç–∏",
        "enhance_general": "–û–±—â–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ",
        "oil_painting": "–ú–∞—Å–ª–æ –Ω–∞ —Ö–æ–ª—Å—Ç–µ",
        "watercolor": "–ê–∫–≤–∞—Ä–µ–ª—å",
        "anime": "–ê–Ω–∏–º–µ —Å—Ç–∏–ª—å",
        "cyberpunk": "–ö–∏–±–µ—Ä–ø–∞–Ω–∫",
        "cinematic": "–ö–∏–Ω–æ—à–Ω—ã–π —Å—Ç–∏–ª—å",
        "fantasy": "–§—ç–Ω—Ç–µ–∑–∏",
        "pixel_art": "Pixel Art",
        "3d_render": "3D Render",
        "graffiti": "–ì—Ä–∞—Ñ—Ñ–∏—Ç–∏",
        "warm": "–¢–µ–ø–ª—ã–µ —Ç–æ–Ω–∞",
        "cold": "–•–æ–ª–æ–¥–Ω—ã–µ —Ç–æ–Ω–∞",
        "bw": "–ß–µ—Ä–Ω–æ-–±–µ–ª–æ–µ",
        "vintage": "–í–∏–Ω—Ç–∞–∂",
        "to_night": "–î–µ–Ω—å ‚Üí –ù–æ—á—å",
        "to_day": "–ù–æ—á—å ‚Üí –î–µ–Ω—å",
        "to_winter": "–ó–∏–º–∞",
        "to_spring": "–í–µ—Å–Ω–∞",
        "change_bg": "–°–º–µ–Ω–∞ —Ñ–æ–Ω–∞",
        "add_elements": "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤",
        "change_location": "–°–º–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏–∏",
        "change_clothes": "–°–º–µ–Ω–∞ –æ–¥–µ–∂–¥—ã",
        "cosplay": "–ö–æ—Å–ø–ª–µ–π",
        "change_character": "–°–º–µ–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞",
        "format_16_9": "–§–æ—Ä–º–∞—Ç 16:9",
        "format_9_16": "–§–æ—Ä–º–∞—Ç 9:16",
        "format_1_1": "–§–æ—Ä–º–∞—Ç 1:1",
        "outpaint": "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü",
        "bokeh": "Bokeh —ç—Ñ—Ñ–µ–∫—Ç",
        "remove_object": "–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞",
    }
    
    return names.get(function, function)


# ==================== –ù–ê–í–ò–ì–ê–¶–ò–Ø ====================

@router.callback_query(lambda c: c.data == "back_to_photo_menu")
async def back_to_photo_menu(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ñ–æ—Ç–æ"""
    await start_photo_mode(callback, state)


@router.callback_query(lambda c: c.data == "back_to_categories")
async def back_to_categories(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await state.set_state(PhotoStates.editing_choosing_category)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ú® –£–ª—É—á—à–µ–Ω–∏–µ", callback_data="cat_enhance")],
            [InlineKeyboardButton(text="üé® –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è", callback_data="cat_style")],
            [InlineKeyboardButton(text="üåà –¶–≤–µ—Ç–∞ –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞", callback_data="cat_color")],
            [InlineKeyboardButton(text="üîÑ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏", callback_data="cat_transform")],
            [InlineKeyboardButton(text="üìê –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ", callback_data="cat_technical")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_photo_menu")],
        ]
    )
    
    await callback.message.answer(
        "‚úÖ **–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ**\n\n"
        "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()