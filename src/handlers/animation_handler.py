"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω"""
import logging
import asyncio
import json
import uuid
import time
import sys
from pathlib import Path
from typing import Optional

sys.path.insert(0, str(Path(__file__).parent.parent.parent))

import google.generativeai as genai
from aiogram import Router, types
from aiogram.client.bot import Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from src.config import GEMINI_API_KEY
from generators.image_utils import ImageUploader
from integrations.airtable.airtable_logger import session_logger

logger = logging.getLogger(__name__)
router = Router()


async def enhance_animation_prompt(prompt: str) -> str:
    """–£–ª—É—á—à–∞–µ—Ç –ø—Ä–æ–º—Ç –¥–ª—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Google Gemini"""
    if not GEMINI_API_KEY:
        logger.warning("‚ö†Ô∏è GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º—Ç")
        return prompt
    
    try:
        genai.configure(api_key=GEMINI_API_KEY)
        
        system_prompt = """–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –≤–∏–¥–µ–æ –ø—Ä–æ–º—Ç–æ–≤ –¥–ª—è AI –º–æ–¥–µ–ª–µ–π –≤–∏–¥–µ–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (Kling, Sora, Veo).
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–æ–±–∞–≤–∏–≤:
1. –ë–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –æ –¥–≤–∏–∂–µ–Ω–∏–∏ –∫–∞–º–µ—Ä—ã –∏ –¥–∏–Ω–∞–º–∏–∫–µ
2. –£—Ç–æ—á–Ω–µ–Ω–∏–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã –∏ —Å—Ç–∏–ª—è (–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—è, –æ—Å–≤–µ—â–µ–Ω–∏–µ)
3. –î–µ—Ç–∞–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π/–æ–±—ä–µ–∫—Ç–æ–≤
4. –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–¥–µ–Ω—å/–Ω–æ—á—å, –ø–æ–≥–æ–¥–∞)
5. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º—Ç (–Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ), –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π. –î–ª–∏–Ω–∞: 200-300 —Å–∏–º–≤–æ–ª–æ–≤."""
        
        model = genai.GenerativeModel("gemini-2.0-flash")
        response = await asyncio.to_thread(
            model.generate_content,
            f"{system_prompt}\n\n–£–ª—É—á—à–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º—Ç –¥–ª—è –≤–∏–¥–µ–æ:\n{prompt}"
        )
        
        enhanced = response.text.strip()
        logger.info(f"‚úÖ –ü—Ä–æ–º—Ç —É–ª—É—á—à–µ–Ω Gemini:\n–û—Ä–∏–≥–∏–Ω–∞–ª: {prompt}\n–£–ª—É—á—à–µ–Ω–Ω—ã–π: {enhanced}")
        return enhanced
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –ø—Ä–æ–º—Ç–∞ Gemini: {e}")
        logger.warning(f"‚ö†Ô∏è –í–æ–∑–≤—Ä–∞—â–∞—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º—Ç")
        return prompt


class AnimationStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω—ã - –û–î–ù–û –≤–∏–¥–µ–æ, –±–µ–∑ —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ —Å—Ü–µ–Ω—ã"""
    choosing_model = State()              # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ AI
    choosing_aspect_ratio = State()       # –í—ã–±–æ—Ä —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
    choosing_duration = State()           # –í—ã–±–æ—Ä –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    choosing_resolution = State()         # –í—ã–±–æ—Ä —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è Veo)
    choosing_audio = State()              # –í—ã–±–æ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–≤—É–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è Veo)
    choosing_image_option = State()       # –ó–∞–≥—Ä—É–∂–∞—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?
    waiting_for_image = State()           # –ï—Å–ª–∏ –¥–∞ - –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    waiting_for_prompt = State()          # –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º—Ç
    waiting_for_negative_prompt = State() # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–º—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    choosing_enhance_option = State()     # –£–ª—É—á—à–∞—Ç—å –ª–∏ —Å –ò–ò?
    reviewing_enhanced_prompt = State()   # –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º—Ç–∞
    editing_prompt = State()              # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º—Ç–∞
    generating = State()                  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ


@router.callback_query(lambda c: c.data == "animation")
async def start_animation(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω—ã - –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ AI"""
    from src.workflow_tracker import WorkflowTracker
    
    await callback.answer()
    
    # üîÑ –°–æ–∑–¥–∞–Ω–∏–µ workflow —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞
    user_id = callback.from_user.id
    session_id = f"animation_{uuid.uuid4().hex[:12]}"
    start_time = time.time()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WorkflowTracker
    tracker = WorkflowTracker()
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –í–°–ï–• —ç—Ç–∞–ø–æ–≤ workflow
    stages = [
        {"id": 1, "title": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", "description": "–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"},
        {"id": 2, "title": "üì∏ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "description": "–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–∏—è"},
        {"id": 3, "title": "‚úçÔ∏è –ù–∞–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞", "description": "–û–ø–∏—Å–∞–Ω–∏–µ –∂–µ–ª–∞–µ–º–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏"},
        {"id": 4, "title": "ü§ñ –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞", "description": "–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ Gemini AI"},
        {"id": 5, "title": "üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ", "description": "–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Replicate API"},
        {"id": 6, "title": "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", "description": "Replicate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å"},
        {"id": 7, "title": "üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ", "description": "–ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ç–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ"},
        {"id": 8, "title": "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram", "description": "–î–æ—Å—Ç–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"}
    ]
    
    # –ó–∞–ø—É—Å–∫ workflow (–º–µ—Ç–æ–¥ —Å–∞–º —Å–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç workflow_id)
    workflow_id = tracker.start_workflow(user_id, "üé® –ê–Ω–∏–º–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏", stages)
    
    # üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Airtable
    await session_logger.log_session_start(
        user_id=user_id,
        session_id=session_id,
        video_type="animation"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º workflow_id –≤ state
    await state.update_data(workflow_id=workflow_id, session_id=session_id, start_time=start_time, video_type="animation")
    
    # –ü–µ—Ä–≤—ã–π —ç—Ç–∞–ø - –≤—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    tracker.update_stage(workflow_id, 1, "running", {"step": "–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ AI"})
    
    await state.set_state(AnimationStates.choosing_model)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üé¨ Kling v2.5 Turbo Pro", callback_data="anim_model_kling")],
            [InlineKeyboardButton(text="üé• Veo 3.1 Fast", callback_data="anim_model_veo")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
    )
    
    await callback.message.answer(
        "üé® –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
        "–í—ã–±–µ—Ä–∏ AI –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
        "üé¨ <b>Kling v2.5 Turbo Pro</b>\n"
        "   üí∞ $0.07/—Å–µ–∫ (~$0.70 –∑–∞ 10 —Å–µ–∫)\n"
        "   ‚≠ê –ë—é–¥–∂–µ—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç\n"
        "   ‚úÖ –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ\n\n"
        "üé• <b>Veo 3.1 Fast</b>\n"
        "   üí∞ $0.15/—Å–µ–∫ (~$1.20 –∑–∞ 8 —Å–µ–∫)\n"
        "   ‚≠ê –õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ\n"
        "   ‚úÖ –ó–≤—É–∫ –∏ 1080p –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        "üìä <b>–°–ª–µ–¥–∏ –∑–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–º:</b> http://localhost:3000/workflow",
        parse_mode="HTML",
        reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data.startswith("anim_model_"))
async def choose_animation_model(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–∏—è"""
    from src.workflow_tracker import WorkflowTracker
    
    await callback.answer()
    
    model_map = {
        "anim_model_kling": ("kwaivgi/kling-v2.5-turbo-pro", "üé¨ Kling v2.5 Turbo Pro"),
        "anim_model_veo": ("google/veo-3.1-fast", "üé• Veo 3.1 Fast")
    }
    
    model, model_name = model_map.get(callback.data, ("", ""))
    await state.update_data(model=model, model_name=model_name)
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ workflow
    data = await state.get_data()
    if "workflow_id" in data:
        tracker = WorkflowTracker()
        tracker.update_stage(data["workflow_id"], 1, "running", {"step": "–í—ã–±–æ—Ä —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω", "model": model_name})
    
    await state.set_state(AnimationStates.choosing_aspect_ratio)
    
    # –í—ã–±–æ—Ä —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–æ–¥–µ–ª–∏)
    is_veo = "veo" in model.lower()
    
    if is_veo:
        # Veo –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ 16:9 –∏ 9:16
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="16:9 (–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ)", callback_data="anim_aspect_169")],
                [InlineKeyboardButton(text="9:16 (–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ)", callback_data="anim_aspect_916")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ]
        )
    else:
        # Kling –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 16:9, 9:16 –∏ 1:1
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="16:9 (–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ)", callback_data="anim_aspect_169")],
                [InlineKeyboardButton(text="9:16 (–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ)", callback_data="anim_aspect_916")],
                [InlineKeyboardButton(text="1:1 (–ö–≤–∞–¥—Ä–∞—Ç)", callback_data="anim_aspect_11")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ]
        )
    
    await callback.message.answer(
        f"‚úÖ –ú–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞: {model_name}\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
        f"üìê –í—ã–±–µ—Ä–∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –¥–ª—è –≤–∏–¥–µ–æ:",
        reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data.startswith("anim_aspect_"))
async def choose_aspect_ratio(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω"""
    await callback.answer()
    
    aspect_map = {
        "anim_aspect_169": ("16:9", "16:9 (–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ)"),
        "anim_aspect_916": ("9:16", "9:16 (–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ)"),
        "anim_aspect_11": ("1:1", "1:1 (–ö–≤–∞–¥—Ä–∞—Ç)")
    }
    
    aspect, aspect_name = aspect_map.get(callback.data, ("16:9", ""))
    await state.update_data(aspect_ratio=aspect)
    await state.set_state(AnimationStates.choosing_duration)
    
    # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    data = await state.get_data()
    model = data.get("model", "")
    is_veo = "veo" in model.lower()
    
    # –í—ã–±–æ—Ä –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–æ–¥–µ–ª–∏)
    if is_veo:
        # Veo –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ 4, 6, 8 —Å–µ–∫—É–Ω–¥
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚è±Ô∏è 4 —Å–µ–∫—É–Ω–¥—ã", callback_data="anim_duration_4")],
                [InlineKeyboardButton(text="‚è±Ô∏è 6 —Å–µ–∫—É–Ω–¥", callback_data="anim_duration_6")],
                [InlineKeyboardButton(text="‚è±Ô∏è 8 —Å–µ–∫—É–Ω–¥ (–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)", callback_data="anim_duration_8")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ]
        )
    else:
        # Kling –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 5, 10 —Å–µ–∫—É–Ω–¥
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚è±Ô∏è 5 —Å–µ–∫—É–Ω–¥", callback_data="anim_duration_5")],
                [InlineKeyboardButton(text="‚è±Ô∏è 10 —Å–µ–∫—É–Ω–¥", callback_data="anim_duration_10")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ]
        )
    
    await callback.message.answer(
        f"‚úÖ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω: {aspect_name}\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
        f"‚è±Ô∏è –í—ã–±–µ—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ:",
        reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data.startswith("anim_duration_"))
async def choose_duration(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    await callback.answer()
    
    duration_map = {
        "anim_duration_4": 4,
        "anim_duration_5": 5,
        "anim_duration_6": 6,
        "anim_duration_8": 8,
        "anim_duration_10": 10
    }
    
    duration = duration_map.get(callback.data, 5)
    await state.update_data(duration=duration)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å
    data = await state.get_data()
    model = data.get("model", "")
    is_veo = "veo" in model.lower()
    
    if is_veo:
        # –î–ª—è Veo –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        await state.set_state(AnimationStates.choosing_resolution)
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üì∫ 720p (HD)", callback_data="anim_resolution_720p")],
                [InlineKeyboardButton(text="üì∫ 1080p (Full HD) ‚≠ê", callback_data="anim_resolution_1080p")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ]
        )
        
        await callback.message.answer(
            f"‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
            f"üì∫ –í—ã–±–µ—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤–∏–¥–µ–æ:",
            reply_markup=keyboard
        )
    else:
        # –î–ª—è Kling —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ Veo
        await state.update_data(resolution="1080p", generate_audio=True)
        await state.set_state(AnimationStates.choosing_image_option)
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω—É", callback_data="anim_image_yes")],
                [InlineKeyboardButton(text="‚ùå –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω—ã", callback_data="anim_image_no")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ]
        )
        
        await callback.message.answer(
            f"‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
            f"üñºÔ∏è –•–æ—á–µ—à—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–∏—è?\n"
            f"(–ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–æ–º—Ç–∞)",
            reply_markup=keyboard
        )


@router.callback_query(lambda c: c.data.startswith("anim_resolution_"))
async def choose_resolution(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è Veo)"""
    await callback.answer()
    
    resolution_map = {
        "anim_resolution_720p": "720p",
        "anim_resolution_1080p": "1080p"
    }
    
    resolution = resolution_map.get(callback.data, "1080p")
    await state.update_data(resolution=resolution)
    await state.set_state(AnimationStates.choosing_audio)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîä –°–æ –∑–≤—É–∫–æ–º ‚≠ê", callback_data="anim_audio_yes")],
            [InlineKeyboardButton(text="üîá –ë–µ–∑ –∑–≤—É–∫–∞", callback_data="anim_audio_no")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
    )
    
    await callback.message.answer(
        f"‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {resolution}\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
        f"üîä –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–≤—É–∫ –¥–ª—è –≤–∏–¥–µ–æ?",
        reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data.startswith("anim_audio_"))
async def choose_audio(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–≤—É–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è Veo)"""
    await callback.answer()
    
    audio_map = {
        "anim_audio_yes": (True, "–°–æ –∑–≤—É–∫–æ–º"),
        "anim_audio_no": (False, "–ë–µ–∑ –∑–≤—É–∫–∞")
    }
    
    generate_audio, audio_text = audio_map.get(callback.data, (True, "–°–æ –∑–≤—É–∫–æ–º"))
    await state.update_data(generate_audio=generate_audio)
    await state.set_state(AnimationStates.choosing_image_option)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω—É", callback_data="anim_image_yes")],
            [InlineKeyboardButton(text="‚ùå –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω—ã", callback_data="anim_image_no")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
    )
    
    await callback.message.answer(
        f"‚úÖ –ó–≤—É–∫: {audio_text}\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
        f"üñºÔ∏è –•–æ—á–µ—à—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–∏—è?\n"
        f"(–ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–æ–º—Ç–∞)",
        reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data == "anim_image_yes")
async def choose_image_yes(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
    await callback.answer()
    await state.set_state(AnimationStates.waiting_for_image)
    
    await callback.message.answer(
        "üì§ –û—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω—É, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å:\n"
        "(PNG, JPG –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)"
    )


@router.callback_query(lambda c: c.data == "anim_image_no")
async def choose_image_no(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    await callback.answer()
    await state.update_data(image_url=None)
    await state.set_state(AnimationStates.waiting_for_prompt)
    
    await callback.message.answer(
        "‚úÖ OK, –±—É–¥–µ–º –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–æ–º—Ç–∞\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
        "üìù –ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å:\n\n"
        "–ü—Ä–∏–º–µ—Ä: '–ö—Ä–∞—Å–∏–≤—ã–π –ø–µ–π–∑–∞–∂ –≥–æ—Ä–Ω—ã—Ö –≤–µ—Ä—à–∏–Ω —Å –æ–±–ª–∞–∫–∞–º–∏'"
    )


@router.message(AnimationStates.waiting_for_image)
async def process_animation_image(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if message.photo:
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏
            processing_msg = await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∫–∞—Ä—Ç–∏–Ω—É –Ω–∞ –æ–±–ª–∞–∫–æ...")
            
            logger.info(f"üì∏ DEBUG: –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ ImageUploader...")
            logger.info(f"   Telegram file_id: {message.photo[-1].file_id}")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ —Å Telegram –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ ImgBB
            uploader = ImageUploader()
            image_url = await uploader.process_telegram_photo(
                message.bot,
                message.photo[-1].file_id,
                photo_name="animation_frame"
            )
            
            logger.info(f"üì∏ DEBUG: process_telegram_photo() –≤–µ—Ä–Ω—É–ª: {image_url}")
            
            if image_url:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –æ–±–ª–∞–∫–∞ (–Ω–µ file_id!)
                await state.update_data(image_url=image_url)
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏: {image_url}")
                logger.info(f"‚úÖ image_url —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ FSM")
                
                # VERIFY - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
                state_data = await state.get_data()
                saved_url = state_data.get("image_url")
                logger.info(f"üîç VERIFY: –ü—Ä–æ–≤–µ—Ä—è—é —á—Ç–æ –±—ã–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ FSM")
                logger.info(f"   saved_url = {saved_url}")
                logger.info(f"   saved_url == image_url? {saved_url == image_url}")
                logger.info(f"   saved_url type = {type(saved_url).__name__}")
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ workflow - —ç—Ç–∞–ø 2 –∑–∞–≤–µ—Ä—à–µ–Ω
                from src.workflow_tracker import WorkflowTracker
                if "workflow_id" in state_data:
                    tracker = WorkflowTracker()
                    tracker.update_stage(state_data["workflow_id"], 1, "completed", {"step": "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"})
                    tracker.update_stage(state_data["workflow_id"], 2, "completed", {"image_url": image_url[:50] + "..."})
                    tracker.update_stage(state_data["workflow_id"], 3, "running", {"step": "–û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞"})
                
                await processing_msg.delete()
                await state.set_state(AnimationStates.waiting_for_prompt)
                await message.answer(
                    "‚úÖ –ö–∞—Ä—Ç–∏–Ω–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!\n"
                    "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
                    "üìù –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏:\n\n"
                    "–ü—Ä–∏–º–µ—Ä: '–≤–æ–ª–Ω—É—é—â–µ–µ—Å—è –º–æ—Ä–µ —Å –∑–∞–∫–∞—Ç–æ–º', '–ª–µ—Ç—è—â–∏–µ –ø—Ç–∏—Ü—ã'"
                )
            else:
                logger.error(f"‚ùå ImageUploader.process_telegram_photo() –≤–µ—Ä–Ω—É–ª None!")
                await processing_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
                return
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /–æ—Ç–º–µ–Ω–∞")
            return
    else:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–æ—Ç–æ")


@router.message(AnimationStates.waiting_for_prompt)
async def process_animation_prompt(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–º—Ç–∞"""
    from src.workflow_tracker import WorkflowTracker
    
    prompt = message.text
    await state.update_data(prompt=prompt)
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ workflow - —ç—Ç–∞–ø 3 –∑–∞–≤–µ—Ä—à–µ–Ω
    data = await state.get_data()
    if "workflow_id" in data:
        tracker = WorkflowTracker()
        tracker.update_stage(data["workflow_id"], 3, "completed", {"prompt": prompt[:50] + "..."})
    
    await state.set_state(AnimationStates.waiting_for_negative_prompt)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–º—Ç", callback_data="anim_neg_yes")],
            [InlineKeyboardButton(text="‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="anim_neg_no")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
    )
    
    await message.answer(
        f"‚úÖ –ü—Ä–æ–º—Ç –ø–æ–ª—É—á–µ–Ω: '{prompt[:60]}...'\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
        f"‚ùå –•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–º—Ç?\n"
        f"(–ß—Ç–æ –ù–ï –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –≤–∏–¥–µ–æ)",
        reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data == "anim_neg_yes")
async def add_negative_prompt(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–º—Ç"""
    await callback.answer()
    await state.set_state(AnimationStates.waiting_for_negative_prompt)
    
    await callback.message.answer(
        "‚ùå –ù–∞–ø–∏—à–∏ —á—Ç–æ –ù–ï –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –≤–∏–¥–µ–æ:\n\n"
        "–ü—Ä–∏–º–µ—Ä: '—Ä–∞–∑–º—ã—Ç–æ–µ, –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã'"
    )


@router.callback_query(lambda c: c.data == "anim_neg_no")
async def skip_negative_prompt(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–º—Ç"""
    await callback.answer()
    await state.update_data(negative_prompt="")
    await state.set_state(AnimationStates.choosing_enhance_option)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ú® –£–ª—É—á—à–∏—Ç—å —Å –ø–æ–º–æ—â—å—é –ò–ò", callback_data="anim_enhance_yes")],
            [InlineKeyboardButton(text="‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –µ—Å—Ç—å", callback_data="anim_enhance_no")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
    )
    
    await callback.message.answer(
        "‚úÖ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–º—Ç –ø—Ä–æ–ø—É—â–µ–Ω\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
        "‚ú® –•–æ—á–µ—à—å —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º—Ç —Å –ø–æ–º–æ—â—å—é –ò–ò?\n"
        "(–ò–ò –¥–æ–±–∞–≤–∏—Ç –¥–µ—Ç–∞–ª–∏ –∏ —É–ª—É—á—à–∏—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ–ø–∏—Å–∞–Ω–∏—è)",
        reply_markup=keyboard
    )


@router.message(AnimationStates.waiting_for_negative_prompt)
async def process_negative_prompt(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º—Ç–∞"""
    negative_prompt = message.text
    await state.update_data(negative_prompt=negative_prompt)
    await state.set_state(AnimationStates.choosing_enhance_option)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ú® –£–ª—É—á—à–∏—Ç—å —Å –ø–æ–º–æ—â—å—é –ò–ò", callback_data="anim_enhance_yes")],
            [InlineKeyboardButton(text="‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –µ—Å—Ç—å", callback_data="anim_enhance_no")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
    )
    
    await message.answer(
        f"‚úÖ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–º—Ç: '{negative_prompt[:50]}...'\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
        f"‚ú® –•–æ—á–µ—à—å —É–ª—É—á—à–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º—Ç —Å –ø–æ–º–æ—â—å—é –ò–ò?",
        reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data == "anim_enhance_yes")
async def enhance_prompt_yes(callback: types.CallbackQuery, state: FSMContext):
    """–£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º—Ç —á–µ—Ä–µ–∑ –ò–ò"""
    await callback.answer()
    await state.set_state(AnimationStates.reviewing_enhanced_prompt)
    
    data = await state.get_data()
    original_prompt = data.get("prompt", "")
    
    msg = await callback.message.answer(
        f"‚ú® –£–ª—É—á—à–∞—é –ø—Ä–æ–º—Ç —á–µ—Ä–µ–∑ –ò–ò...\n"
        f"‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥..."
    )
    
    # –£–ª—É—á—à–∞–µ–º –ø—Ä–æ–º—Ç —á–µ—Ä–µ–∑ Google Gemini
    enhanced_prompt = await enhance_animation_prompt(original_prompt)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        original_prompt=original_prompt,
        enhanced_prompt=enhanced_prompt
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–ª—É—á—à–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ú® –†–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="anim_regen_prompt")],
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="anim_edit_prompt")],
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data="anim_accept_prompt")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="anim_reject_prompt")]
        ]
    )
    
    if enhanced_prompt != original_prompt:
        await callback.message.answer(
            f"‚úÖ –ü—Ä–æ–º—Ç —É–ª—É—á—à–µ–Ω!\n\n"
            f"üìù <b>–û—Ä–∏–≥–∏–Ω–∞–ª:</b>\n<code>{original_prompt}</code>\n\n"
            f"‚ú® <b>–£–ª—É—á—à–µ–Ω–Ω—ã–π:</b>\n<code>{enhanced_prompt}</code>\n\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            f"–ß—Ç–æ –¥–∞–ª—å—à–µ?",
            parse_mode="HTML",
            reply_markup=keyboard
        )
    else:
        await callback.message.answer(
            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º—Ç —á–µ—Ä–µ–∑ –ò–ò\n\n"
            f"üìù <b>–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º—Ç:</b>\n<code>{original_prompt}</code>\n\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            f"–ß—Ç–æ –¥–∞–ª—å—à–µ?",
            parse_mode="HTML",
            reply_markup=keyboard
        )


@router.callback_query(lambda c: c.data == "anim_enhance_no")
async def enhance_prompt_no(callback: types.CallbackQuery, state: FSMContext):
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º—Ç –∫–∞–∫ –µ—Å—Ç—å"""
    await callback.answer()
    await state.set_state(AnimationStates.generating)
    await start_generation(callback, state)


@router.callback_query(lambda c: c.data == "anim_regen_prompt")
async def regenerate_prompt(callback: types.CallbackQuery, state: FSMContext):
    """–†–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å (–ø–µ—Ä–µ—É–ª—É—á—à–∏—Ç—å) –ø—Ä–æ–º—Ç –µ—â–µ —Ä–∞–∑"""
    await callback.answer()
    
    data = await state.get_data()
    current_prompt = data.get("enhanced_prompt", data.get("prompt", ""))
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        await callback.message.delete()
    except:
        pass
    
    msg = await callback.message.answer(
        f"‚ú® –ü–µ—Ä–µ—É–ª—É—á—à–∞—é –ø—Ä–æ–º—Ç —á–µ—Ä–µ–∑ –ò–ò...\n"
        f"‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥..."
    )
    
    # –ï—â–µ —Ä–∞–∑ —É–ª—É—á—à–∞–µ–º (–Ω–∞ –æ—Å–Ω–æ–≤–µ —É–∂–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ)
    re_enhanced_prompt = await enhance_animation_prompt(current_prompt)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(enhanced_prompt=re_enhanced_prompt)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ú® –†–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ", callback_data="anim_regen_prompt")],
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="anim_edit_prompt")],
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data="anim_accept_prompt")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="anim_reject_prompt")]
        ]
    )
    
    await callback.message.answer(
        f"‚úÖ –ü—Ä–æ–º—Ç –ø–µ—Ä–µ—É–ª—É—á—à–µ–Ω!\n\n"
        f"‚ú® <b>–ù–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:</b>\n<code>{re_enhanced_prompt}</code>\n\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"–ß—Ç–æ –¥–∞–ª—å—à–µ?",
        parse_mode="HTML",
        reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data == "anim_edit_prompt")
async def edit_prompt(callback: types.CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º—Ç–∞"""
    await callback.answer()
    await state.set_state(AnimationStates.editing_prompt)
    
    data = await state.get_data()
    enhanced_prompt = data.get("enhanced_prompt", data.get("prompt", ""))
    
    await callback.message.answer(
        f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º—Ç–∞\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
        f"üìù –¢–µ–∫—É—â–∏–π –ø—Ä–æ–º—Ç:\n<code>{enhanced_prompt}</code>\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ–º—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:",
        parse_mode="HTML"
    )


@router.message(AnimationStates.editing_prompt)
async def process_edited_prompt(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º—Ç–∞"""
    edited_prompt = message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º—Ç
    await state.update_data(enhanced_prompt=edited_prompt)
    await state.set_state(AnimationStates.reviewing_enhanced_prompt)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ú® –†–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="anim_regen_prompt")],
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="anim_edit_prompt")],
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data="anim_accept_prompt")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="anim_reject_prompt")]
        ]
    )
    
    await message.answer(
        f"‚úÖ –ü—Ä–æ–º—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
        f"üìù <b>–ù–æ–≤—ã–π –ø—Ä–æ–º—Ç:</b>\n<code>{edited_prompt}</code>\n\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"–ß—Ç–æ –¥–∞–ª—å—à–µ?",
        parse_mode="HTML",
        reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data == "anim_accept_prompt")
async def accept_prompt(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–∏–Ω—è—Ç—å —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º—Ç –∏ –Ω–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é"""
    await callback.answer()
    
    data = await state.get_data()
    final_prompt = data.get("enhanced_prompt", data.get("prompt", ""))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º—Ç –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π
    await state.update_data(prompt=final_prompt)
    await state.set_state(AnimationStates.generating)
    
    await callback.message.answer("‚úÖ –ü—Ä–æ–º—Ç –ø—Ä–∏–Ω—è—Ç! –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ...")
    await start_generation(callback, state)


@router.callback_query(lambda c: c.data == "anim_reject_prompt")
async def reject_prompt(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–∫–ª–æ–Ω–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—É"""
    await callback.answer()
    
    data = await state.get_data()
    original_prompt = data.get("original_prompt", data.get("prompt", ""))
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—É
    await state.update_data(prompt=original_prompt, enhanced_prompt=None)
    await state.set_state(AnimationStates.choosing_enhance_option)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ú® –£–ª—É—á—à–∏—Ç—å —Å –ø–æ–º–æ—â—å—é –ò–ò –µ—â–µ —Ä–∞–∑", callback_data="anim_enhance_yes")],
            [InlineKeyboardButton(text="‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª –∫–∞–∫ –µ—Å—Ç—å", callback_data="anim_enhance_no")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
    )
    
    await callback.message.answer(
        f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ. –í–µ—Ä–Ω—É–ª–∏—Å—å –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–º—Ç—É.\n\n"
        f"üìù <b>–û—Ä–∏–≥–∏–Ω–∞–ª:</b>\n<code>{original_prompt}</code>\n\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"‚ú® –•–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —É–ª—É—á—à–∏—Ç—å –µ—â–µ —Ä–∞–∑?",
        parse_mode="HTML",
        reply_markup=keyboard
    )


async def start_generation(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ"""
    data = await state.get_data()
    
    model = data.get("model", "kling")  # kling, veo
    model_name = data.get("model_name", "Unknown")
    aspect_ratio = data.get("aspect_ratio", "16:9")
    duration = data.get("duration", 5)
    prompt = data.get("prompt", "")
    negative_prompt = data.get("negative_prompt", "")
    image_url = data.get("image_url")  # URL –æ–±–ª–∞–∫–∞, –Ω–µ file_id!
    resolution = data.get("resolution", "1080p")  # –î–ª—è Veo
    generate_audio = data.get("generate_audio", True)  # –î–ª—è Veo
    workflow_id = data.get("workflow_id")  # üîÑ –ü–æ–ª—É—á–∞–µ–º workflow_id
    
    logger.info(f"üìä DEBUG: image_url –∏–∑ FSM = {image_url}")  # üëà –î–õ–Ø –û–¢–õ–ê–î–ö–ò
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å
    is_veo = "veo" in model.lower()
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    price_per_second = 0.15 if is_veo else 0.07  # Veo: $0.15/—Å–µ–∫, Kling: $0.07/—Å–µ–∫
    total_cost = duration * price_per_second
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    summary = (
        f"üé¨ –ü–ê–†–ê–ú–ï–¢–†–´ –í–ò–î–ï–û\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"üé® –ú–æ–¥–µ–ª—å: {model_name}\n"
        f"üìê –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω: {aspect_ratio}\n"
        f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫\n"
    )
    
    if is_veo:
        summary += f"üì∫ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {resolution}\n"
        summary += f"üîä –ó–≤—É–∫: {'–î–∞' if generate_audio else '–ù–µ—Ç'}\n"
    
    summary += f"üìù –ü—Ä–æ–º—Ç: {prompt[:70]}{'...' if len(prompt) > 70 else ''}\n"
    
    if negative_prompt:
        summary += f"‚ùå –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–º—Ç: {negative_prompt[:50]}{'...' if len(negative_prompt) > 50 else ''}\n"
    
    if image_url:
        summary += f"üñºÔ∏è –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ\n"
    
    summary += (
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"üí∞ –°–¢–û–ò–ú–û–°–¢–¨: ~${total_cost:.2f}\n"
        f"   ({duration} —Å–µ–∫ √ó ${price_per_second}/—Å–µ–∫)\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
        f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ...\n"
        f"‚è∞ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 2-5 –º–∏–Ω—É—Ç"
    )
    
    await callback.message.answer(summary)
    logger.info(f"üé¨ –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {model}")
    logger.info(f"   üìù –ü—Ä–æ–º—Ç: {prompt[:100]}")
    logger.info(f"   ‚ùå –û—Ç—Ä. –ø—Ä–æ–º—Ç: {negative_prompt[:100] if negative_prompt else 'N/A'}")
    logger.info(f"   üñºÔ∏è –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {image_url[:80] if image_url else '–ù–µ—Ç (text-to-video —Ä–µ–∂–∏–º)'}...")
    logger.info(f"   üì∫ Resolution: {resolution}")
    logger.info(f"   üîä Audio: {generate_audio}")
    
    # üî¥ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ background task
    logger.info(f"üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–†–ò –°–û–ó–î–ê–ù–ò–ò TASK:")
    logger.info(f"   ‚úì user_id = {callback.from_user.id}")
    logger.info(f"   ‚úì model = {model}")
    logger.info(f"   ‚úì prompt = {prompt[:50]}...")
    logger.info(f"   ‚úì duration = {duration}")
    logger.info(f"   ‚úì aspect_ratio = {aspect_ratio}")
    logger.info(f"   ‚úì resolution = {resolution}")
    logger.info(f"   ‚úì generate_audio = {generate_audio}")
    logger.info(f"   ‚úì negative_prompt = {negative_prompt[:50] if negative_prompt else 'N/A'}...")
    logger.info(f"   ‚úì image_url = {image_url} (—Ç–∏–ø: {type(image_url).__name__}, –¥–ª–∏–Ω–∞: {len(image_url) if image_url else 'N/A'})")
    
    # ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (—Å —Ñ–æ—Ç–æ –∏–ª–∏ –±–µ–∑)
    logger.info(f"‚úÖ –û–¢–ü–†–ê–í–õ–Ø–Æ TASK —Å image_url: {image_url}")
    asyncio.create_task(generate_video_async(
        callback.from_user.id,
        callback.bot,
        model,
        prompt,
        duration,
        aspect_ratio,
        negative_prompt,
        image_url,
        resolution,
        generate_audio,
        workflow_id  # üîÑ –ü–µ—Ä–µ–¥–∞–µ–º workflow_id
    ))
    
    await state.clear()


async def generate_video_async(
    user_id: int,
    bot: Bot,
    model: str,
    prompt: str,
    duration: int,
    aspect_ratio: str,
    negative_prompt: str,
    image_url: Optional[str] = None,
    resolution: str = "1080p",
    generate_audio: bool = True,
    workflow_id: Optional[str] = None  # üîÑ –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä workflow_id
):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    try:
        from video_generator import VideoGenerator
        from video_stitcher import VideoStitcher
        from pathlib import Path
        from src.workflow_tracker import WorkflowTracker
        
        logger.info(f"üé¨ [–§–û–ù–û–í–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø] –ù–∞—á–∞–ª–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        logger.info(f"üìä image_url –ø–æ–ª—É—á–µ–Ω –≤ generate_video_async: {image_url}")
        logger.info(f"üìä –¢–∏–ø image_url: {type(image_url)}")
        logger.info(f"üìä –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Å—Ç—ã–º: {not image_url}")
        logger.info(f"üì∫ Resolution: {resolution}")
        logger.info(f"üîä Generate audio: {generate_audio}")
        
        generator = VideoGenerator()
        stitcher = VideoStitcher()
        
        # üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WorkflowTracker
        tracker = WorkflowTracker()
        
        # –ï—Å–ª–∏ workflow_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
        if not workflow_id:
            stages = [
                {"id": 1, "title": "üìù –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", "description": f"–ú–æ–¥–µ–ª—å: {model}, Duration: {duration}s"},
                {"id": 2, "title": "üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Replicate API", "description": f"Prompt: {prompt[:50]}..."},
                {"id": 3, "title": "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", "description": "Replicate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å"},
                {"id": 4, "title": "üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ", "description": "–ó–∞–≥—Ä—É–∑–∫–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞ Replicate"},
                {"id": 5, "title": "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram", "description": "–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"}
            ]
            workflow_id = tracker.start_workflow(user_id=user_id, title=f"üéûÔ∏è –ê–Ω–∏–º–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ ({model})", stages=stages)
            tracker.update_stage(workflow_id, 1, "completed")
        
        # Workflow —É–∂–µ —Å–æ–∑–¥–∞–Ω –≤ start_animation, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —ç—Ç–∞–ø–∞ 4 (Gemini —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞)
        # –≠—Ç–∞–ø 4: –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ)
        # –≠—Ç–∞–ø 5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Replicate API
        tracker.update_stage(workflow_id, 4, "completed", {"step": "–ü—Ä–æ–º–ø—Ç –≥–æ—Ç–æ–≤"})
        tracker.update_stage(workflow_id, 5, "running", {"progress": 0})
        logger.info(f"üé¨ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ...")
        logger.info(f"üìä DEBUG: image_url –ø–µ—Ä–µ–¥ generate_scene = {image_url}")  # üëà –î–õ–Ø –û–¢–õ–ê–î–ö–ò
        
        result = await generator.generate_scene(
            prompt=prompt,
            model=model,
            duration=duration,
            aspect_ratio=aspect_ratio,
            start_image_url=image_url,  # –ü–µ—Ä–µ–¥–∞–µ–º URL –æ–±–ª–∞–∫–∞ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            scene_number=1,
            require_image=False,  # ‚úÖ –§–æ—Ç–æ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ - —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ text-to-video
            resolution=resolution,  # –î–ª—è Veo
            generate_audio=generate_audio,  # –î–ª—è Veo
            negative_prompt=negative_prompt  # –î–ª—è Veo –∏ Kling
        )
        
        tracker.update_stage(2, "completed")
        
        # üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º JSON –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
        if result.get("status") == "test_mode":
            json_payload = result.get("json_payload", {})
            model_id = result.get("model_id", "")
            
            message = (
                f"üß™ <b>–¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú</b>\n"
                f"={'=' * 40}\n\n"
                f"üìã <b>Model ID:</b>\n<code>{model_id}</code>\n\n"
                f"üìã <b>JSON payload –¥–ª—è Replicate API:</b>\n"
                f"<pre>{json.dumps(json_payload, ensure_ascii=False, indent=2)}</pre>\n\n"
                f"{'=' * 40}\n"
                f"‚úÖ –ó–∞–ø—Ä–æ—Å –ù–ï –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ API\n"
                f"üìù –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏ –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
            )
            
            await bot.send_message(user_id, message, parse_mode="HTML")
            logger.info(f"‚úÖ JSON –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram")
            tracker.complete_workflow(workflow_id)
            return
        
        if result.get("status") == "error":
            error_msg = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {error_msg}")
            tracker.error_workflow(workflow_id, error_msg, stage_id=5)
            await bot.send_message(
                user_id,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ:\n{error_msg}"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º URL –≤–∏–¥–µ–æ
        video_url = result.get("video_url")
        if not video_url:
            logger.error(f"‚ùå URL –≤–∏–¥–µ–æ –Ω–µ –ø–æ–ª—É—á–µ–Ω")
            tracker.error_workflow(workflow_id, "URL –≤–∏–¥–µ–æ –Ω–µ –ø–æ–ª—É—á–µ–Ω", stage_id=6)
            await bot.send_message(
                user_id,
                "‚ùå –í–∏–¥–µ–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ, –Ω–æ URL –Ω–µ –ø–æ–ª—É—á–µ–Ω"
            )
            return
        
        # –≠—Ç–∞–ø 6: –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–∑–∞–≤–µ—Ä—à–µ–Ω–æ)
        tracker.update_stage(workflow_id, 5, "completed", {"progress": 100})
        tracker.update_stage(workflow_id, 6, "completed", {"video_url": video_url[:50] + "..."})
        logger.info(f"‚úÖ –í–∏–¥–µ–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {video_url[:80]}...")
        
        # –≠—Ç–∞–ø 7: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
        tracker.update_stage(workflow_id, 7, "running", {"progress": 0})
        logger.info(f"üì• –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...")
        await bot.send_message(user_id, "üì• –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ —Å —Å–µ—Ä–≤–µ—Ä–∞...")
        
        video_path = await stitcher.download_video(
            video_url,
            f"animation_{user_id}_final.mp4"
        )
        
        tracker.update_stage(workflow_id, 7, "completed", {"progress": 100})
        
        if not video_path:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ")
            tracker.error_workflow(workflow_id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ", stage_id=7)
            await bot.send_message(
                user_id,
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å —Å–µ—Ä–≤–µ—Ä–∞"
            )
            return
        
        logger.info(f"‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ: {video_path}")
        
        # –≠—Ç–∞–ø 8: –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
        tracker.update_stage(workflow_id, 8, "running", {"progress": 0})
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ –≤ Telegram...")
        await bot.send_message(user_id, "üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ...")
        
        video_file = types.FSInputFile(video_path)
        await bot.send_video(
            user_id,
            video=video_file,
            caption="‚úÖ –¢–≤–æ—è –∞–Ω–∏–º–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞! üé¨\n\nüéâ –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º!"
        )
        
        tracker.update_stage(workflow_id, 8, "completed", {"progress": 100})
        logger.info(f"‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
        # üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤ Airtable
        data = await state.get_data()
        session_id = data.get("session_id")
        start_time = data.get("start_time")
        video_type = data.get("video_type")
        if session_id and start_time:
            processing_time = time.time() - start_time
            await session_logger.log_session_complete(
                session_id=session_id,
                output_file=video_path,
                processing_time_seconds=processing_time,
                video_type=video_type
            )
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ workflow
        tracker.complete_workflow(workflow_id, output_file=video_path)
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        try:
            Path(video_path).unlink(missing_ok=True)
            logger.info(f"üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        logger.error(f"   Traceback: {asyncio.get_event_loop().is_closed()}")
        import traceback
        logger.error(traceback.format_exc())
        
        # üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ Airtable
        try:
            data = await state.get_data()
            session_id = data.get("session_id")
            video_type = data.get("video_type")
            if session_id:
                await session_logger.log_session_error(
                    session_id=session_id,
                    error_message=str(e),
                    video_type=video_type
                )
        except:
            pass
        
        # –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ –≤ workflow tracker
        try:
            from src.workflow_tracker import WorkflowTracker
            tracker = WorkflowTracker()
            if workflow_id:
                tracker.error_workflow(workflow_id, str(e))
        except:
            pass
        
        try:
            await bot.send_message(
                user_id,
                f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ:\n{str(e)}"
            )
        except:
            logger.error(f"   –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")