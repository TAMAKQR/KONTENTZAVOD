"""–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"""
import asyncio
import logging
import aiohttp
import requests
from typing import Optional
from aiogram import Bot
from config import IMGBB_API_KEY

logger = logging.getLogger(__name__)


class ImageUploader:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –æ–±–ª–∞–∫–æ"""
    
    def __init__(self, imgbb_api_key: str = IMGBB_API_KEY):
        self.imgbb_api_key = imgbb_api_key
        self.imgbb_url = "https://api.imgbb.com/1/upload"
    
    async def download_telegram_photo(self, bot: Bot, file_id: str) -> Optional[bytes]:
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ —Å Telegram —Å–µ—Ä–≤–µ—Ä–∞
        
        Args:
            bot: Aiogram Bot instance
            file_id: Telegram file_id
            
        Returns:
            Bytes —Ñ–æ—Ç–æ –∏–ª–∏ None –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            file = await bot.get_file(file_id)
            file_path = file.file_path
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            async with aiohttp.ClientSession() as session:
                url = f"https://api.telegram.org/file/bot{bot.token}/{file_path}"
                async with session.get(url) as response:
                    if response.status == 200:
                        photo_bytes = await response.read()
                        logger.info(f"‚úÖ –§–æ—Ç–æ —Å–∫–∞—á–∞–Ω–æ —Å Telegram ({len(photo_bytes)} bytes)")
                        return photo_bytes
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ: —Å—Ç–∞—Ç—É—Å {response.status}")
                        return None
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–æ—Ç–æ —Å Telegram: {e}")
            return None
    
    async def upload_to_imgbb(self, image_bytes: bytes, image_name: str = "photo") -> Optional[str]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ ImgBB –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL
        
        Args:
            image_bytes: Bytes –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_name: –ò–º—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
        Returns:
            URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ ImgBB –∏–ª–∏ None –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        if not self.imgbb_api_key:
            logger.error("‚ùå IMGBB_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
            return None
        
        try:
            files = {
                'image': (f'{image_name}.jpg', image_bytes, 'image/jpeg')
            }
            data = {
                'key': self.imgbb_api_key,
                'name': image_name
            }
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ loop.run_in_executor
            loop = asyncio.get_event_loop()
            response = await loop.run_in_executor(
                None,
                lambda: requests.post(self.imgbb_url, files=files, data=data, timeout=30)
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get("success"):
                    image_url = result["data"]["url"]
                    logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ ImgBB: {image_url}")
                    return image_url
                else:
                    logger.error(f"‚ùå ImgBB –æ—à–∏–±–∫–∞: {result.get('error', {}).get('message', 'Unknown')}")
                    return None
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ ImgBB: —Å—Ç–∞—Ç—É—Å {response.status_code}")
                logger.error(f"   –û—Ç–≤–µ—Ç: {response.text[:200]}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞ ImgBB: {e}")
            return None
    
    async def process_telegram_photo(self, bot: Bot, file_id: str, photo_name: str = "photo") -> Optional[str]:
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ —Å Telegram –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞ ImgBB
        
        Args:
            bot: Aiogram Bot instance
            file_id: Telegram file_id
            photo_name: –ò–º—è —Ñ–æ—Ç–æ –¥–ª—è ImgBB
            
        Returns:
            Public URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ None –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            logger.info(f"üì• –°–∫–∞—á–∏–≤–∞—é —Ñ–æ—Ç–æ —Å Telegram...")
            photo_bytes = await self.download_telegram_photo(bot, file_id)
            
            if not photo_bytes:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ —Å Telegram")
                return None
            
            logger.info(f"‚òÅÔ∏è –ó–∞–≥—Ä—É–∂–∞—é —Ñ–æ—Ç–æ –Ω–∞ ImgBB...")
            image_url = await self.upload_to_imgbb(photo_bytes, photo_name)
            
            if image_url:
                logger.info(f"‚úÖ –§–æ—Ç–æ –≥–æ—Ç–æ–≤–æ: {image_url}")
                return image_url
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –Ω–∞ ImgBB")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
            return None