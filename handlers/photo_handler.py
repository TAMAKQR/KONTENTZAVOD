"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ"""
from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

router = Router()


class PhotoStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ"""
    choosing_model = State()  # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ AI - –ü–ï–†–í–´–ô –í–´–ë–û–†
    waiting_for_image = State()
    waiting_for_editing_type = State()
    waiting_for_prompt = State()
    processing = State()


@router.callback_query(lambda c: c.data == "photo")
async def start_photo_editing(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ - –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏"""
    await callback.answer()
    await state.set_state(PhotoStates.choosing_model)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üé® Google Nano Banana", callback_data="model_nano_photo")],
            [InlineKeyboardButton(text="üñºÔ∏è Google Imagen 4", callback_data="model_imagen_photo")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")],
        ]
    )
    
    await callback.message.answer(
        "üñºÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ\n\n"
        "–í—ã–±–µ—Ä–∏ AI –º–æ–¥–µ–ª—å:",
        reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data.startswith("model_") and c.data.endswith("_photo"), PhotoStates.choosing_model)
async def choose_photo_model(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ"""
    await callback.answer()
    
    model_map = {
        "model_nano_photo": "google/nano-banana",
        "model_imagen_photo": "google/imagen-4"
    }
    
    model = model_map.get(callback.data)
    await state.update_data(model=model)
    await state.set_state(PhotoStates.waiting_for_image)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
    )
    
    model_name = callback.data.replace("model_", "").replace("_photo", "").upper()
    
    await callback.message.answer(
        f"üì¶ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model_name}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:",
        reply_markup=keyboard
    )


@router.message(PhotoStates.waiting_for_image)
async def process_photo_image(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if message.photo:
        await state.update_data(image_id=message.photo[-1].file_id)
        await state.set_state(PhotoStates.waiting_for_editing_type)
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ú® –£–ª—É—á—à–∏—Ç—å", callback_data="enhance_photo")],
                [InlineKeyboardButton(text="üé® –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å", callback_data="style_photo")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")],
            ]
        )
        
        await message.answer(
            "‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!\n\n"
            "–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=keyboard
        )
    else:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")


@router.callback_query(lambda c: c.data in ["enhance_photo", "style_photo"], PhotoStates.waiting_for_editing_type)
async def process_editing_type(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await callback.answer()
    
    edit_action = "enhance" if callback.data == "enhance_photo" else "style"
    await state.update_data(edit_action=edit_action)
    await state.set_state(PhotoStates.waiting_for_prompt)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
    )
    
    data = await state.get_data()
    model = data.get("model", "google/nano-banana")
    model_name = model.replace("google/", "").upper()
    
    if edit_action == "enhance":
        prompt_text = (
            f"‚ú® –£–ª—É—á—à–µ–Ω–∏–µ —Ñ–æ—Ç–æ (–º–æ–¥–µ–ª—å: {model_name})\n\n"
            f"–û–ø–∏—à–∏, –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å —Ñ–æ—Ç–æ:\n"
            f"(–Ω–∞–ø—Ä–∏–º–µ—Ä: '—Å–¥–µ–ª–∞—Ç—å —è—Ä—á–µ', '—É–±—Ä–∞—Ç—å —à—É–º', '–ø–æ–≤—ã—Å–∏—Ç—å —Ä–µ–∑–∫–æ—Å—Ç—å')"
        )
    else:
        prompt_text = (
            f"üé® –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è (–º–æ–¥–µ–ª—å: {model_name})\n\n"
            f"–û–ø–∏—à–∏ –∂–µ–ª–∞–µ–º—ã–π —Å—Ç–∏–ª—å:\n"
            f"(–Ω–∞–ø—Ä–∏–º–µ—Ä: '–º–∞—Å–ª–æ –Ω–∞ —Ö–æ–ª—Å—Ç–µ', '–∞–Ω–∏–º–µ', '–∫–∏–±–µ—Ä–ø–∞–Ω–∫')"
        )
    
    await callback.message.answer(
        prompt_text,
        reply_markup=keyboard
    )


@router.message(PhotoStates.waiting_for_prompt)
async def process_editing_prompt(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await state.set_state(PhotoStates.processing)
    
    data = await state.get_data()
    model = data.get("model", "google/nano-banana")
    editing_type = data.get("editing_type", "")
    
    await message.answer(
        f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...\n\n"
        f"–ú–æ–¥–µ–ª—å: {model}\n"
        f"–¢–∏–ø: {editing_type}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {message.text}\n\n"
        f"‚è∞ –§–æ—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è..."
    )
    
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    
    await message.answer("‚úÖ –§–æ—Ç–æ –≥–æ—Ç–æ–≤–æ!")
    await state.clear()