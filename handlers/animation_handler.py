"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω"""
from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

router = Router()


class AnimationStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω—ã"""
    choosing_model = State()  # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ AI
    waiting_for_image = State()
    waiting_for_prompt = State()
    generating = State()


@router.callback_query(lambda c: c.data == "animation")
async def start_animation(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω—ã - –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ AI"""
    await callback.answer()
    await state.set_state(AnimationStates.choosing_model)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üé¨ Kling v2.5 Turbo Pro", callback_data="model_kling_anim")],
            [InlineKeyboardButton(text="üéûÔ∏è Sora 2", callback_data="model_sora_anim")],
            [InlineKeyboardButton(text="üé• Veo 3.1 Fast", callback_data="model_veo_anim")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
    )
    
    await callback.message.answer(
        "üé® –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã\n\n"
        "–í—ã–±–µ—Ä–∏ AI –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data.startswith("model_") and c.data.endswith("_anim"))
async def choose_animation_model(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await callback.answer()
    
    model_map = {
        "model_kling_anim": "kwaivgi/kling-v2.5-turbo-pro",
        "model_sora_anim": "openai/sora-2",
        "model_veo_anim": "google/veo-3.1-fast"
    }
    
    model = model_map.get(callback.data)
    await state.update_data(model=model)
    await state.set_state(AnimationStates.waiting_for_image)
    
    model_name = callback.data.replace("model_", "").replace("_anim", "").upper()
    
    await callback.message.answer(
        f"‚úÖ –ú–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞: {model_name}\n\n"
        f"üì§ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω—É, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å:"
    )


@router.message(AnimationStates.waiting_for_image)
async def process_animation_image(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if message.photo:
        await state.update_data(image_id=message.photo[-1].file_id)
        await state.set_state(AnimationStates.waiting_for_prompt)
        
        await message.answer(
            "‚úÖ –ö–∞—Ä—Ç–∏–Ω–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n\n"
            "–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏, –∫–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å –µ—ë –∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å:\n"
            "(–Ω–∞–ø—Ä–∏–º–µ—Ä: '–≤–æ–ª–Ω—É—é—â–µ–µ—Å—è –º–æ—Ä–µ', '–ª–µ—Ç—è—â–∏–µ –ø—Ç–∏—Ü—ã')"
        )
    else:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")


@router.message(AnimationStates.waiting_for_prompt)
async def process_animation_prompt(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏"""
    await state.set_state(AnimationStates.generating)
    
    data = await state.get_data()
    model = data.get("model", "google/veo-3.1-fast")
    
    await message.answer(
        f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...\n\n"
        f"–ú–æ–¥–µ–ª—å: {model}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {message.text}\n\n"
        f"‚è∞ –í–∏–¥–µ–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è... (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç)"
    )
    
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    
    await message.answer("‚úÖ –ê–Ω–∏–º–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞!")
    await state.clear()