"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ—Ç–æ–∫–∞ –¢–µ–∫—Å—Ç + –§–æ—Ç–æ + AI ‚Üí –í–∏–¥–µ–æ"""
import asyncio
import json
import logging
from aiogram import Router, types, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import StateFilter
from video_generator import VideoGenerator
from photo_generator import PhotoGenerator
from video_stitcher import VideoStitcher
from image_utils import ImageUploader

logger = logging.getLogger(__name__)
router = Router()


class PhotoAIStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –¢–µ–∫—Å—Ç + –§–æ—Ç–æ + AI"""
    choosing_model = State()  # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ (—Ç–æ–ª—å–∫–æ kling)
    choosing_aspect_ratio = State()  # –í—ã–±–æ—Ä —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
    asking_reference = State()  # –í–æ–ø—Ä–æ—Å –æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–µ
    waiting_reference = State()  # –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞
    waiting_prompt = State()  # –í–≤–æ–¥ –ø—Ä–æ–º—Ç–∞
    processing_prompt = State()  # GPT –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º—Ç–∞
    confirming_scenes = State()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—Ü–µ–Ω
    editing_scene = State()  # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
    generating_photos = State()  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ
    confirming_photos = State()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ñ–æ—Ç–æ
    generating_video = State()  # –§–∏–Ω–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ


@router.callback_query(lambda c: c.data == "video_text_photo_ai")
async def start_text_photo_ai_video(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø–æ—Ç–æ–∫–∞ –¢–µ–∫—Å—Ç + –§–æ—Ç–æ + AI"""
    await callback.answer()
    await state.set_state(PhotoAIStates.choosing_model)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üé¨ Kling v2.5 Turbo Pro ‚≠ê", callback_data="photo_ai_model_kling")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
    )
    
    await callback.message.answer(
        "üìùüñºÔ∏èü§ñ –†–µ–∂–∏–º: –¢–µ–∫—Å—Ç + –§–æ—Ç–æ + AI ‚Üí –í–∏–¥–µ–æ\n\n"
        "–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:\n"
        "1Ô∏è‚É£ –†–∞–∑–±–∏–≤–∞–µ—Ç –ø—Ä–æ–º—Ç –Ω–∞ —Å—Ü–µ–Ω—ã\n"
        "2Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã (google/nano-banana)\n"
        "3Ô∏è‚É£ –°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ç–æ (Kling v2.5)\n\n"
        "üé¨ –í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å –≤–∏–¥–µ–æ:",
        reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data.startswith("photo_ai_model_"))
async def choose_photo_ai_model(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ—Ç–æ–∫–∞ –¢–µ–∫—Å—Ç + –§–æ—Ç–æ + AI"""
    await callback.answer()
    
    # –î–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ kling
    await state.update_data(
        model="kwaivgi/kling-v2.5-turbo-pro",
        model_key="kling"
    )
    await state.set_state(PhotoAIStates.choosing_aspect_ratio)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üì∫ 16:9 (YouTube/Desktop)", callback_data="photo_ai_aspect_16_9")],
            [InlineKeyboardButton(text="üì± 9:16 (TikTok/Shorts) ‚≠ê", callback_data="photo_ai_aspect_9_16")],
            [InlineKeyboardButton(text="‚¨ú 1:1 (Instagram Feed)", callback_data="photo_ai_aspect_1_1")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
    )
    
    await callback.message.answer(
        "‚úÖ –ú–æ–¥–µ–ª—å: üé¨ Kling v2.5 Turbo Pro\n"
        "{'‚îÄ' * 40}\n\n"
        "üìê –í—ã–±–µ—Ä–∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –¥–ª—è —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ:",
        reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data.startswith("photo_ai_aspect_"))
async def choose_photo_ai_aspect_ratio(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω"""
    await callback.answer()
    
    aspect_map = {
        "photo_ai_aspect_16_9": "16:9",
        "photo_ai_aspect_9_16": "9:16",
        "photo_ai_aspect_1_1": "1:1"
    }
    
    aspect_ratio = aspect_map.get(callback.data, "16:9")
    await state.update_data(aspect_ratio=aspect_ratio)
    await state.set_state(PhotoAIStates.asking_reference)
    
    aspect_names = {
        "16:9": "üì∫ 16:9 (–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ)",
        "9:16": "üì± 9:16 (–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ)",
        "1:1": "‚¨ú 1:1 (–ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ)"
    }
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—É", callback_data="photo_ai_with_reference"),
                InlineKeyboardButton(text="‚ùå –ë–µ–∑ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞", callback_data="photo_ai_without_reference")
            ],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
    )
    
    await callback.message.answer(
        f"‚úÖ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω: {aspect_names.get(aspect_ratio, aspect_ratio)}\n"
        f"{'‚îÄ' * 40}\n\n"
        f"üé® –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?\n\n"
        f"‚úÖ –ü–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—É - –∑–∞–≥—Ä—É–∂–∞–µ—à—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, AI –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ –≤ –ø–æ—Ö–æ–∂–µ–º —Å—Ç–∏–ª–µ\n"
        f"‚ùå –ë–µ–∑ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞ - AI —Å–∞–º–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é",
        reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data == "photo_ai_with_reference")
async def ask_for_reference(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞"""
    await callback.answer()
    await state.update_data(use_reference=True)
    await state.set_state(PhotoAIStates.waiting_reference)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="back_to_menu")]]
    )
    
    await callback.message.answer(
        "üì∏ –ó–∞–≥—Ä—É–∑–∏ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å:\n"
        "‚Ä¢ –ö–∞—Ä—Ç–∏–Ω–∞ –∏–ª–∏ —Ñ–æ—Ç–æ –≤ –∂–µ–ª–∞–µ–º–æ–º —Å—Ç–∏–ª–µ\n"
        "‚Ä¢ –°–∫—Ä–∏–Ω—à–æ—Ç –∏–∑ —Ñ–∏–ª—å–º–∞\n"
        "‚Ä¢ –õ—é–±–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–¥–∞–µ—Ç –∞—Ç–º–æ—Å—Ñ–µ—Ä—É\n\n"
        "Google/Nano-Banana –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –≤ –ø–æ—Ö–æ–∂–µ–º —Å—Ç–∏–ª–µ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã.",
        reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data == "photo_ai_without_reference")
async def skip_reference(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞"""
    await callback.answer()
    await state.update_data(use_reference=False, reference_url=None)
    await state.set_state(PhotoAIStates.waiting_prompt)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="back_to_menu")]]
    )
    
    await callback.message.answer(
        "‚úÖ –†–µ–∂–∏–º –±–µ–∑ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞\n\n"
        "üìù –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å.\n\n"
        "–°–æ–≤–µ—Ç—ã:\n"
        "‚Ä¢ –û–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω—É—é –∏–¥–µ—é, —Å—é–∂–µ—Ç –∏–ª–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—é\n"
        "‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π —Å—Ü–µ–Ω—ã —è–≤–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '3 —Å—Ü–µ–Ω—ã') –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è\n"
        "‚Ä¢ –û–ø–∏—à–∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É, —Å—Ç–∏–ª—å, —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É",
        reply_markup=keyboard
    )


@router.message(PhotoAIStates.waiting_reference)
async def process_reference_image(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞"""
    if message.photo:
        try:
            uploader = ImageUploader()
            reference_url = await uploader.process_telegram_photo(
                message.bot,
                message.photo[-1].file_id,
                photo_name="reference"
            )
            
            if reference_url:
                await state.update_data(reference_url=reference_url)
                await state.set_state(PhotoAIStates.waiting_prompt)
                
                keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="back_to_menu")]]
                )
                
                await message.answer(
                    "‚úÖ –†–µ—Ñ–µ—Ä–µ–Ω—Å –∑–∞–≥—Ä—É–∂–µ–Ω!\n\n"
                    "üìù –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ",
                    reply_markup=keyboard
                )
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}")
    else:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ!")


@router.message(PhotoAIStates.waiting_prompt)
async def process_prompt(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º—Ç–∞ –∏ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —Å—Ü–µ–Ω—ã"""
    data = await state.get_data()
    
    await state.update_data(prompt=message.text)
    await state.set_state(PhotoAIStates.processing_prompt)
    
    input_text = message.text
    indented_input = "\n".join("    " + line for line in input_text.split("\n"))
    
    # –ò–∑–≤–ª–µ–∫–∞—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω
    num_scenes = _extract_num_scenes_from_prompt(message.text)
    
    processing_msg = await message.answer(
        f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º—Ç–∞ —á–µ—Ä–µ–∑ GPT-4...\n"
        f"{'‚îÄ' * 40}\n\n"
        f"üìù –í–∞—à –ø—Ä–æ–º—Ç:\n\n{indented_input}\n\n"
        f"{'‚îÄ' * 40}\n"
        f"ü§ñ –†–∞–∑–±–∏–≤–∞—é –Ω–∞ {num_scenes} —Å—Ü–µ–Ω—ã (5 —Å–µ–∫ –∫–∞–∂–¥–∞—è)..."
    )
    
    try:
        generator = VideoGenerator()
        
        # GPT —Ä–∞–∑–±–∏–≤–∞–µ—Ç –ø—Ä–æ–º—Ç –Ω–∞ —Å—Ü–µ–Ω—ã
        scenes_result = await generator.enhance_prompt_with_gpt(
            prompt=message.text,
            num_scenes=num_scenes,
            duration_per_scene=5  # –ö–∞–∂–¥–∞—è —Å—Ü–µ–Ω–∞ 5 —Å–µ–∫—É–Ω–¥
        )
        
        await state.update_data(
            scenes=scenes_result["scenes"],
            enhanced_prompt=scenes_result["enhanced_prompt"],
            current_scene_index=0
        )
        
        await state.set_state(PhotoAIStates.confirming_scenes)
        
        await show_scene_for_confirmation(message, state, 0)
        await processing_msg.delete()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        await processing_msg.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ —Å /start"
        )
        await state.clear()


async def show_scene_for_confirmation(message: types.Message, state: FSMContext, scene_index: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ü–µ–Ω—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ñ–æ—Ç–æ"""
    data = await state.get_data()
    scenes = data.get("scenes", [])
    
    if scene_index >= len(scenes):
        await start_photo_generation(message, state)
        return
    
    scene = scenes[scene_index]
    
    prompt_text = scene.get('prompt', '')
    indented_prompt = "\n".join("    " + line for line in prompt_text.split("\n"))
    
    scene_text = (
        f"üé¨ –°—Ü–µ–Ω–∞ {scene['id']} –∏–∑ {len(scenes)}\n"
        f"{'‚îÄ' * 40}\n\n"
        f"üìù –ü—Ä–æ–º—Ç –¥–ª—è —Ñ–æ—Ç–æ:\n{indented_prompt}\n\n"
        f"‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {scene.get('duration', 5)} —Å–µ–∫\n"
        f"üé® –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞: {scene.get('atmosphere', 'N/A')}\n\n"
        f"{'‚îÄ' * 40}\n"
        f"–ü–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –ø—Ä–æ–º—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ?"
    )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞–ª–µ–µ", callback_data=f"photo_ai_scene_approve_{scene_index}"),
                InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"photo_ai_scene_edit_{scene_index}")
            ],
            [
                InlineKeyboardButton(text="üîÑ –†–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ", callback_data="photo_ai_scenes_regenerate"),
                InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="back_to_menu")
            ]
        ]
    )
    
    await message.answer(scene_text, parse_mode="Markdown", reply_markup=keyboard)


@router.callback_query(lambda c: c.data.startswith("photo_ai_scene_approve_"))
async def approve_scene(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã"""
    await callback.answer()
    
    scene_index = int(callback.data.replace("photo_ai_scene_approve_", ""))
    data = await state.get_data()
    scenes = data.get("scenes", [])
    
    next_index = scene_index + 1
    await state.update_data(current_scene_index=next_index)
    
    if next_index < len(scenes):
        await show_scene_for_confirmation(callback.message, state, next_index)
    else:
        await start_photo_generation(callback.message, state)


@router.callback_query(lambda c: c.data.startswith("photo_ai_scene_edit_"))
async def edit_scene(callback: types.CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º—Ç–∞ —Å—Ü–µ–Ω—ã"""
    await callback.answer()
    
    scene_index = int(callback.data.replace("photo_ai_scene_edit_", ""))
    await state.update_data(editing_scene_index=scene_index)
    await state.set_state(PhotoAIStates.editing_scene)
    
    data = await state.get_data()
    scenes = data.get("scenes", [])
    scene = scenes[scene_index]
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"photo_ai_edit_done_{scene_index}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="back_to_menu")]
        ]
    )
    
    await callback.message.answer(
        f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã {scene_index + 1}\n\n"
        f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º—Ç:\n{scene['prompt']}\n\n"
        f"–ù–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π –ø—Ä–æ–º—Ç –∏–ª–∏ –Ω–∞–∂–º–∏ –ì–æ—Ç–æ–≤–æ:",
        reply_markup=keyboard
    )


@router.message(PhotoAIStates.editing_scene)
async def process_scene_edit(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º—Ç–∞"""
    data = await state.get_data()
    scene_index = data.get("editing_scene_index", 0)
    scenes = data.get("scenes", [])
    
    if scene_index < len(scenes):
        scenes[scene_index]['prompt'] = message.text
        await state.update_data(scenes=scenes)
    
    await message.answer(f"‚úÖ –°—Ü–µ–Ω–∞ {scene_index + 1} –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    await state.set_state(PhotoAIStates.confirming_scenes)
    await show_scene_for_confirmation(message, state, scene_index)


@router.callback_query(lambda c: c.data.startswith("photo_ai_edit_done_"))
async def edit_scene_done(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await callback.answer()
    scene_index = int(callback.data.replace("photo_ai_edit_done_", ""))
    await state.set_state(PhotoAIStates.confirming_scenes)
    await show_scene_for_confirmation(callback.message, state, scene_index)


@router.callback_query(lambda c: c.data == "photo_ai_scenes_regenerate")
async def regenerate_scenes(callback: types.CallbackQuery, state: FSMContext):
    """–†–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å—Ü–µ–Ω"""
    await callback.answer()
    
    data = await state.get_data()
    prompt = data.get("prompt", "")
    
    await state.set_state(PhotoAIStates.processing_prompt)
    
    processing_msg = await callback.message.answer(
        "‚è≥ –†–µ–≥–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ü–µ–Ω—ã..."
    )
    
    try:
        generator = VideoGenerator()
        num_scenes = _extract_num_scenes_from_prompt(prompt)
        
        scenes_result = await generator.enhance_prompt_with_gpt(
            prompt=prompt,
            num_scenes=num_scenes,
            duration_per_scene=5
        )
        
        await state.update_data(
            scenes=scenes_result["scenes"],
            current_scene_index=0
        )
        
        await state.set_state(PhotoAIStates.confirming_scenes)
        await show_scene_for_confirmation(callback.message, state, 0)
        await processing_msg.delete()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}")


async def start_photo_generation(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ google/nano-banana"""
    data = await state.get_data()
    scenes = data.get("scenes", [])
    aspect_ratio = data.get("aspect_ratio", "16:9")
    reference_url = data.get("reference_url")
    general_prompt = data.get("enhanced_prompt", "")
    
    generating_msg = await message.answer(
        f"üé® –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ñ–æ—Ç–æ –¥–ª—è {len(scenes)} —Å—Ü–µ–Ω...\n\n"
        f"üé¨ google/nano-banana –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ\n"
        f"({'—Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–æ–º' if reference_url else '–±–µ–∑ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞'})\n\n"
        f"‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç..."
    )
    
    await state.set_state(PhotoAIStates.generating_photos)
    
    try:
        photo_gen = PhotoGenerator()
        
        photos_result = await photo_gen.generate_photos_for_scenes(
            scenes=scenes,
            aspect_ratio=aspect_ratio,
            reference_image_url=reference_url,
            general_prompt=general_prompt
        )
        
        if photos_result["status"] == "success":
            scenes_with_photos = photos_result["scenes_with_photos"]
            successful = photos_result["successful_photos"]
            
            await state.update_data(scenes_with_photos=scenes_with_photos)
            await state.set_state(PhotoAIStates.confirming_photos)
            
            await generating_msg.edit_text(
                f"‚úÖ –§–æ—Ç–æ –≥–æ—Ç–æ–≤—ã!\n\n"
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"  –í—Å–µ–≥–æ —Å—Ü–µ–Ω: {photos_result['total_scenes']}\n"
                f"  –£—Å–ø–µ—à–Ω–æ: {successful}\n\n"
                f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—à—å —ç—Ç–∏ —Ñ–æ—Ç–æ –¥–ª—è –≤–∏–¥–µ–æ?"
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞—é –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
            await show_photo_for_confirmation(message, state, 0)
            
        else:
            error = photos_result.get("error", "Unknown error")
            await generating_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {error}")
            await state.clear()
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ: {e}")
        await generating_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}")
        await state.clear()


async def show_photo_for_confirmation(message: types.Message, state: FSMContext, scene_index: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    data = await state.get_data()
    scenes_with_photos = data.get("scenes_with_photos", [])
    
    if scene_index >= len(scenes_with_photos):
        await start_video_generation_final(message, state)
        return
    
    scene = scenes_with_photos[scene_index]
    photo_url = scene.get("photo_url")
    
    if not photo_url:
        error_msg = scene.get("photo_error", "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        text = f"‚ö†Ô∏è –°—Ü–µ–Ω–∞ {scene_index + 1}: –û—à–∏–±–∫–∞\n{error_msg}\n\n–ü—Ä–æ–ø—É—Å–∫–∞—é..."
        await message.answer(text)
        
        next_index = scene_index + 1
        await state.update_data(current_scene_index=next_index)
        await show_photo_for_confirmation(message, state, next_index)
        return
    
    scene_text = (
        f"üñºÔ∏è –°—Ü–µ–Ω–∞ {scene_index + 1} –∏–∑ {len(scenes_with_photos)}\n"
        f"{'‚îÄ' * 40}\n\n"
        f"üìù –ü—Ä–æ–º—Ç: {scene.get('prompt', '')[:100]}...\n"
        f"üé® –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞: {scene.get('atmosphere', 'N/A')}\n\n"
        f"–ü–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ?"
    )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞–ª–µ–µ", callback_data=f"photo_ai_photo_approve_{scene_index}"),
                InlineKeyboardButton(text="üîÑ –†–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"photo_ai_photo_regen_{scene_index}")
            ],
            [
                InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –≤—Å–µ", callback_data="photo_ai_photos_final"),
                InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="back_to_menu")
            ]
        ]
    )
    
    try:
        if scene.get("photo_path"):
            await message.answer_photo(
                types.FSInputFile(scene["photo_path"]),
                caption=scene_text,
                reply_markup=keyboard
            )
        else:
            await message.answer(scene_text, reply_markup=keyboard)
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await message.answer(scene_text, reply_markup=keyboard)


@router.callback_query(lambda c: c.data.startswith("photo_ai_photo_approve_"))
async def approve_photo(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ñ–æ—Ç–æ"""
    await callback.answer()
    scene_index = int(callback.data.replace("photo_ai_photo_approve_", ""))
    
    next_index = scene_index + 1
    await state.update_data(current_scene_index=next_index)
    
    data = await state.get_data()
    scenes_with_photos = data.get("scenes_with_photos", [])
    
    if next_index < len(scenes_with_photos):
        await show_photo_for_confirmation(callback.message, state, next_index)
    else:
        await start_video_generation_final(callback.message, state)


@router.callback_query(lambda c: c.data == "photo_ai_photos_final")
async def approve_all_photos(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–∏–Ω—è—Ç–∏–µ –≤—Å–µ—Ö —Ñ–æ—Ç–æ"""
    await callback.answer()
    await start_video_generation_final(callback.message, state)


async def start_video_generation_final(message: types.Message, state: FSMContext):
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ç–æ"""
    data = await state.get_data()
    scenes_with_photos = data.get("scenes_with_photos", [])
    aspect_ratio = data.get("aspect_ratio", "16:9")
    model = data.get("model", "kwaivgi/kling-v2.5-turbo-pro")
    
    generating_msg = await message.answer(
        f"üé¨ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ç–æ!\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"  –°—Ü–µ–Ω: {len(scenes_with_photos)}\n"
        f"  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {len(scenes_with_photos) * 5} —Å–µ–∫\n"
        f"  –ú–æ–¥–µ–ª—å: Kling v2.5 Turbo Pro\n\n"
        f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã..."
    )
    
    await state.set_state(PhotoAIStates.generating_video)
    
    try:
        generator = VideoGenerator()
        stitcher = VideoStitcher()
        
        video_paths = []
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã —Å —Ñ–æ—Ç–æ
        for idx, scene in enumerate(scenes_with_photos):
            scene_num = idx + 1
            logger.info(f"üé• –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ –¥–ª—è —Å—Ü–µ–Ω—ã {scene_num}/{len(scenes_with_photos)}...")
            
            await generating_msg.edit_text(
                f"üé¨ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ ({scene_num}/{len(scenes_with_photos)})...\n\n"
                f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {int(scene_num / len(scenes_with_photos) * 100)}%"
            )
            
            photo_url = scene.get("photo_url")
            if not photo_url:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è —Å—Ü–µ–Ω—ã {scene_num}, –ø—Ä–æ–ø—É—Å–∫–∞—é")
                continue
            
            result = await generator.generate_scene(
                prompt=scene.get("prompt", ""),
                duration=5,
                aspect_ratio=aspect_ratio,
                model="kling",
                start_image_url=photo_url  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ç–æ –∫–∞–∫ –Ω–∞—á–∞–ª—å–Ω—ã–π —Ñ—Ä–µ–π–º
            )
            
            if result.get("status") == "success":
                video_url = result.get("video_url")
                video_path = await stitcher.download_video(
                    video_url,
                    f"scene_{scene_num}.mp4"
                )
                
                if video_path:
                    video_paths.append(video_path)
                    logger.info(f"‚úÖ –í–∏–¥–µ–æ —Å—Ü–µ–Ω—ã {scene_num} –≥–æ—Ç–æ–≤–æ")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω—ã {scene_num}")
        
        # –°–∫–ª–µ–∏–≤–∞—é –≤–∏–¥–µ–æ
        if video_paths:
            await generating_msg.edit_text("üéûÔ∏è –°–∫–ª–µ–∏–≤–∞—é –≤–∏–¥–µ–æ...")
            
            final_video = await stitcher.stitch_videos(video_paths)
            
            if final_video:
                await generating_msg.delete()
                
                await message.answer_video(
                    types.FSInputFile(final_video),
                    caption="‚úÖ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ! –°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é:\n"
                            "‚Ä¢ Google Nano-Banana (—Ñ–æ—Ç–æ)\n"
                            "‚Ä¢ Kling v2.5 Turbo Pro (–≤–∏–¥–µ–æ)"
                )
                
                await stitcher.cleanup_temp_files()
                logger.info("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            else:
                await generating_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–ª–µ–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ")
        else:
            await generating_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –¥–ª—è —Å—Ü–µ–Ω")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {e}")
        await generating_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}")
    
    finally:
        await state.clear()


def _extract_num_scenes_from_prompt(prompt: str) -> int:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω –∏–∑ –ø—Ä–æ–º—Ç–∞"""
    import re
    
    patterns = [
        r'(\d+)\s*—Å—Ü–µ–Ω',
        r'(\d+)\s*scene',
        r'–Ω–∞\s*(\d+)\s*—Å—Ü–µ–Ω',
        r'—Ä–∞–∑–±–∏—Ç—å –Ω–∞\s*(\d+)',
        r'(\d+)\s*—á–∞—Å—Ç–µ–π',
        r'split.*?(\d+)',
    ]
    
    for pattern in patterns:
        match = re.search(pattern, prompt, re.IGNORECASE)
        if match:
            num = int(match.group(1))
            if 1 <= num <= 20:
                return num
    
    return 3  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 3 —Å—Ü–µ–Ω—ã