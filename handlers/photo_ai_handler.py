"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ—Ç–æ–∫–∞ –¢–µ–∫—Å—Ç + –§–æ—Ç–æ + AI ‚Üí –í–∏–¥–µ–æ"""
import asyncio
import json
import logging
from aiogram import Router, types, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.filters import StateFilter
from video_generator import VideoGenerator
from photo_generator import PhotoGenerator
from video_stitcher import VideoStitcher

logger = logging.getLogger(__name__)
router = Router()


# ‚úÖ –•–ï–õ–ü–ï–†: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JSON –¥–ª—è –ò–ò
async def save_scenes_result_to_json(message: types.Message, scenes: list, enhanced_prompt: str, aspect_ratio: str = "16:9"):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ –≤ JSON —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ò–ò"""
    from datetime import datetime
    
    try:
        user_id = message.from_user.id if message.from_user else "unknown"
        
        json_result = {
            "timestamp": datetime.now().isoformat(),
            "user_id": user_id,
            "enhanced_prompt": enhanced_prompt,
            "num_scenes": len(scenes),
            "aspect_ratio": aspect_ratio,
            "scenes": []
        }
        
        for i, scene in enumerate(scenes, 1):
            scene_data = {
                "scene_number": i,
                "prompt": scene.get("prompt", ""),
                "duration": scene.get("duration", 5),
                "atmosphere": scene.get("atmosphere", ""),
                "photo_path": scene.get("photo_path", ""),
                "photo_url": scene.get("photo_url", ""),
                "photo_error": scene.get("photo_error", None)
            }
            json_result["scenes"].append(scene_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON —Ñ–∞–π–ª
        json_path = f"d:\\VIDEO\\temp_images\\scene_result_{user_id}_{int(datetime.now().timestamp())}.json"
        with open(json_path, 'w', encoding='utf-8') as f:
            json.dump(json_result, f, ensure_ascii=False, indent=2)
        
        logger.info(f"‚úÖ JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {json_path}")
        return json_path
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ JSON: {e}")
        return None


class PhotoAIStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –¢–µ–∫—Å—Ç + –§–æ—Ç–æ + AI"""
    choosing_model = State()  # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ (—Ç–æ–ª—å–∫–æ kling)
    choosing_aspect_ratio = State()  # –í—ã–±–æ—Ä —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
    asking_reference = State()  # –í–æ–ø—Ä–æ—Å –æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–µ
    waiting_reference = State()  # –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞
    waiting_prompt = State()  # –í–≤–æ–¥ –ø—Ä–æ–º—Ç–∞
    processing_prompt = State()  # GPT –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º—Ç–∞
    confirming_scenes = State()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—Ü–µ–Ω
    editing_scene = State()  # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
    generating_photos = State()  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ
    confirming_photos = State()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ñ–æ—Ç–æ
    generating_video = State()  # –§–∏–Ω–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ


@router.callback_query(lambda c: c.data == "video_text_photo_ai")
async def start_text_photo_ai_video(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø–æ—Ç–æ–∫–∞ –¢–µ–∫—Å—Ç + –§–æ—Ç–æ + AI"""
    await callback.answer()
    await state.set_state(PhotoAIStates.choosing_model)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üé¨ Kling v2.5 Turbo Pro ‚≠ê", callback_data="photo_ai_model_kling")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
    )
    
    await callback.message.answer(
        "üìùüñºÔ∏èü§ñ –†–µ–∂–∏–º: –¢–µ–∫—Å—Ç + –§–æ—Ç–æ + AI ‚Üí –í–∏–¥–µ–æ\n\n"
        "–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:\n"
        "1Ô∏è‚É£ –†–∞–∑–±–∏–≤–∞–µ—Ç –ø—Ä–æ–º—Ç –Ω–∞ —Å—Ü–µ–Ω—ã\n"
        "2Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã (google/nano-banana)\n"
        "3Ô∏è‚É£ –°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ç–æ (Kling v2.5)\n\n"
        "üé¨ –í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å –≤–∏–¥–µ–æ:",
        reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data.startswith("photo_ai_model_"))
async def choose_photo_ai_model(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ—Ç–æ–∫–∞ –¢–µ–∫—Å—Ç + –§–æ—Ç–æ + AI"""
    await callback.answer()
    
    # –î–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ kling
    await state.update_data(
        model="kwaivgi/kling-v2.5-turbo-pro",
        model_key="kling"
    )
    await state.set_state(PhotoAIStates.choosing_aspect_ratio)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üì∫ 16:9 (YouTube/Desktop)", callback_data="photo_ai_aspect_16_9")],
            [InlineKeyboardButton(text="üì± 9:16 (TikTok/Shorts) ‚≠ê", callback_data="photo_ai_aspect_9_16")],
            [InlineKeyboardButton(text="‚¨ú 1:1 (Instagram Feed)", callback_data="photo_ai_aspect_1_1")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
    )
    
    await callback.message.answer(
        "‚úÖ –ú–æ–¥–µ–ª—å: üé¨ Kling v2.5 Turbo Pro\n"
        f"{'‚îÄ' * 40}\n\n"
        "üìê –í—ã–±–µ—Ä–∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –¥–ª—è —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ:",
        reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data.startswith("photo_ai_aspect_"))
async def choose_photo_ai_aspect_ratio(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω"""
    await callback.answer()
    
    aspect_map = {
        "photo_ai_aspect_16_9": "16:9",
        "photo_ai_aspect_9_16": "9:16",
        "photo_ai_aspect_1_1": "1:1"
    }
    
    aspect_ratio = aspect_map.get(callback.data, "16:9")
    await state.update_data(aspect_ratio=aspect_ratio)
    await state.set_state(PhotoAIStates.asking_reference)
    
    aspect_names = {
        "16:9": "üì∫ 16:9 (–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ)",
        "9:16": "üì± 9:16 (–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ)",
        "1:1": "‚¨ú 1:1 (–ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ)"
    }
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—É", callback_data="photo_ai_with_reference"),
                InlineKeyboardButton(text="‚ùå –ë–µ–∑ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞", callback_data="photo_ai_without_reference")
            ],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
    )
    
    await callback.message.answer(
        f"‚úÖ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω: {aspect_names.get(aspect_ratio, aspect_ratio)}\n"
        f"{'‚îÄ' * 40}\n\n"
        f"üé® –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?\n\n"
        f"‚úÖ –ü–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—É - –∑–∞–≥—Ä—É–∂–∞–µ—à—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, AI –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ –≤ –ø–æ—Ö–æ–∂–µ–º —Å—Ç–∏–ª–µ\n"
        f"‚ùå –ë–µ–∑ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞ - AI —Å–∞–º–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é",
        reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data == "photo_ai_with_reference")
async def ask_for_reference(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞"""
    await callback.answer()
    await state.update_data(use_reference=True)
    await state.set_state(PhotoAIStates.waiting_reference)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="back_to_menu")]]
    )
    
    await callback.message.answer(
        "üì∏ –ó–∞–≥—Ä—É–∑–∏ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å:\n"
        "‚Ä¢ –ö–∞—Ä—Ç–∏–Ω–∞ –∏–ª–∏ —Ñ–æ—Ç–æ –≤ –∂–µ–ª–∞–µ–º–æ–º —Å—Ç–∏–ª–µ\n"
        "‚Ä¢ –°–∫—Ä–∏–Ω—à–æ—Ç –∏–∑ —Ñ–∏–ª—å–º–∞\n"
        "‚Ä¢ –õ—é–±–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–¥–∞–µ—Ç –∞—Ç–º–æ—Å—Ñ–µ—Ä—É\n\n"
        "Google/Nano-Banana –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –≤ –ø–æ—Ö–æ–∂–µ–º —Å—Ç–∏–ª–µ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã.",
        reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data == "photo_ai_without_reference")
async def skip_reference(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞"""
    await callback.answer()
    await state.update_data(use_reference=False, reference_url=None)
    await state.set_state(PhotoAIStates.waiting_prompt)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="back_to_menu")]]
    )
    
    await callback.message.answer(
        "‚úÖ –†–µ–∂–∏–º –±–µ–∑ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞\n\n"
        "üìù –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å.\n\n"
        "–°–æ–≤–µ—Ç—ã:\n"
        "‚Ä¢ –û–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω—É—é –∏–¥–µ—é, —Å—é–∂–µ—Ç –∏–ª–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—é\n"
        "‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π —Å—Ü–µ–Ω—ã —è–≤–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '3 —Å—Ü–µ–Ω—ã') –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è\n"
        "‚Ä¢ –û–ø–∏—à–∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É, —Å—Ç–∏–ª—å, —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É",
        reply_markup=keyboard
    )


@router.message(PhotoAIStates.waiting_reference)
async def process_reference_image(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞"""
    if message.photo:
        try:
            # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ –∏–∑ Telegram (–≤–º–µ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ ImgBB)
            # –≠—Ç–æ –ø—Ä–æ—â–µ –∏ –Ω–∞–¥–µ–∂–Ω–µ–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å Replicate API
            file = await message.bot.get_file(message.photo[-1].file_id)
            reference_url = f"https://api.telegram.org/file/bot{message.bot.token}/{file.file_path}"
            
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ Telegram —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ: {reference_url[:80]}...")
            
            if reference_url:
                await state.update_data(reference_url=reference_url)
                await state.set_state(PhotoAIStates.waiting_prompt)
                
                keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="back_to_menu")]]
                )
                
                await message.answer(
                    "‚úÖ –†–µ—Ñ–µ—Ä–µ–Ω—Å –∑–∞–≥—Ä—É–∂–µ–Ω!\n\n"
                    "üìù –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ",
                    reply_markup=keyboard
                )
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}")
    else:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ!")


@router.message(PhotoAIStates.waiting_prompt)
async def process_prompt(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º—Ç–∞ –∏ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —Å—Ü–µ–Ω—ã + –°–†–ê–ó–£ –ì–ï–ù–ï–†–ò–†–£–ï–ú –í–°–ï –§–û–¢–û –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û (–ë–ï–ó –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø –°–¶–ï–ù)"""
    data = await state.get_data()
    reference_file_id = data.get("reference_file_id")
    
    await state.update_data(prompt=message.text)
    await state.set_state(PhotoAIStates.processing_prompt)
    
    input_text = message.text
    indented_input = "\n".join("    " + line for line in input_text.split("\n"))
    
    # –ò–∑–≤–ª–µ–∫–∞—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω
    num_scenes = _extract_num_scenes_from_prompt(message.text)
    
    processing_msg = await message.answer(
        f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º—Ç–∞ —á–µ—Ä–µ–∑ GPT-4...\n"
        f"{'‚îÄ' * 40}\n\n"
        f"üìù –í–∞—à –ø—Ä–æ–º—Ç:\n\n{indented_input}\n\n"
        f"{'‚îÄ' * 40}\n"
        f"ü§ñ –†–∞–∑–±–∏–≤–∞—é –Ω–∞ {num_scenes} —Å—Ü–µ–Ω—ã (5 —Å–µ–∫ –∫–∞–∂–¥–∞—è)...\n"
        f"üì∏ –ó–∞—Ç–µ–º –≥–µ–Ω–µ—Ä–∏—Ä—É—é —Ñ–æ—Ç–æ (–ø–∞—Ä–∞–ª–ª–µ–ª—å)..."
    )
    
    try:
        generator = VideoGenerator()
        
        # ‚úÖ GPT —Ä–∞–∑–±–∏–≤–∞–µ—Ç –ø—Ä–æ–º—Ç –Ω–∞ —Å—Ü–µ–Ω—ã
        scenes_result = await generator.enhance_prompt_with_gpt(
            prompt=message.text,
            num_scenes=num_scenes,
            duration_per_scene=5
        )
        
        scenes = scenes_result["scenes"]
        enhanced_prompt = scenes_result.get("enhanced_prompt", "")
        
        # ‚úÖ –¢–û–õ–¨–ö–û –ü–û–ö–ê–ó–´–í–ê–ï–ú —á—Ç–æ –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–ë–ï–ó –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
        await processing_msg.edit_text(
            f"‚úÖ GPT-4 –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!\n"
            f"{'‚ïê' * 50}\n\n"
            f"üì∏ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ñ–æ—Ç–æ –¥–ª—è {len(scenes)} —Å—Ü–µ–Ω...\n"
            f"‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç 1-2 –º–∏–Ω (–∫–∞–∂–¥–æ–µ —Ñ–æ—Ç–æ –Ω–∞—Å–ª–µ–¥—É–µ—Ç –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ)...\n\n"
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –Ω–∏–∂–µ ‚Üì"
        )
        
        # ‚úÖ –®–ê–ì 1: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –§–û–¢–û –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û –° –ù–ê–°–õ–ï–î–û–í–ê–ù–ò–ï–ú
        photo_gen = PhotoGenerator()
        
        # –ü–æ–ª—É—á–∞–µ–º URL —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞ –∏–∑ state, –µ—Å–ª–∏ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω
        reference_url = data.get("reference_url")
        logger.info(f"üîç DEBUG photo_ai_handler: reference_url = {reference_url}")
        logger.info(f"üîç DEBUG photo_ai_handler: –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ state = {list(data.keys())}")
        if reference_url:
            logger.info(f"üì∏ –ò—Å–ø–æ–ª—å–∑—É–µ–º reference_url: {reference_url[:80]}...")
        else:
            logger.info(f"üì∏ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ë–ï–ó reference (reference_url –ø—É—Å—Ç/None)")
        
        photos_result = await photo_gen.generate_photos_for_scenes(
            scenes=scenes,
            aspect_ratio=data.get("aspect_ratio", "16:9"),
            reference_image_url=reference_url,  # ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º —Ä–µ–∞–ª—å–Ω—ã–π URL —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞
            general_prompt=""
        )
        
        # ‚úÖ –®–ê–ì 2: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ü–µ–Ω—ã —Å —É–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ —Ñ–æ—Ç–æ
        final_scenes_with_photos = photos_result.get("scenes_with_photos", [])
        successful_photos = photos_result.get("successful_photos", 0)
        total_scenes = photos_result.get("total_scenes", len(final_scenes_with_photos))
        
        # ‚ö†Ô∏è –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ
        if successful_photos < total_scenes:
            failed_count = total_scenes - successful_photos
            error_msg = (
                f"‚ö†Ô∏è –£–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ: {successful_photos}/{total_scenes}\n"
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {failed_count} —Å—Ü–µ–Ω—ã\n\n"
                f"üí° –°–æ–≤–µ—Ç: –≠—Ç–æ —á–∞—Å—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∏–∑-–∑–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ API.\n"
                f"üìù –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º—Ç:\n"
                f"- –ò–∑–±–µ–≥–∞–π—Ç–µ —Å–ª–æ–≤ '–∂–µ–Ω—â–∏–Ω–∞', '—á–µ–ª–æ–≤–µ–∫', '–ø–æ—Ä—Ç—Ä–µ—Ç'\n"
                f"- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ø–µ—Ä—Å–æ–Ω–∞–∂', '—Å—É—â–µ—Å—Ç–≤–æ', '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'\n"
                f"- –°–¥–µ–ª–∞–π—Ç–µ –ø—Ä–æ–º—Ç –±–æ–ª–µ–µ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–º –∏–ª–∏ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–Ω—ã–º"
            )
            logger.warning(f"‚ö†Ô∏è {error_msg}")
        
        await state.update_data(
            scenes=final_scenes_with_photos,
            enhanced_prompt=enhanced_prompt,
            current_photo_index=0
        )
        
        # ‚úÖ –°–û–•–†–ê–ù–Ø–ï–ú —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON –¥–ª—è –ò–ò (–∏—Å–ø–æ–ª—å–∑—É—è —Ö–µ–ª–ø–µ—Ä)
        await save_scenes_result_to_json(
            message=message,
            scenes=final_scenes_with_photos,
            enhanced_prompt=enhanced_prompt,
            aspect_ratio=data.get("aspect_ratio", "16:9")
        )
        
        # ‚úÖ –®–ê–ì 3: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï –°–¶–ï–ù–´ + –í–°–ï –§–û–¢–û –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await processing_msg.delete()
        await state.set_state(PhotoAIStates.confirming_photos)
        await show_all_scenes_and_photos_for_confirmation(message, state)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        error_text = str(e)
        
        # ‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ E005 (—Ñ–∏–ª—å—Ç—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
        if "E005" in error_text or "sensitive" in error_text.lower():
            help_text = (
                f"‚ùå –û—à–∏–±–∫–∞: –§–∏–ª—å—Ç—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ API\n\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: –ü—Ä–æ–º—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞ –æ —Ä–µ–∞–ª—å–Ω—ã—Ö –ª—é–¥—è—Ö\n\n"
                f"üí° –°–æ–≤–µ—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n"
                f"‚úèÔ∏è –ò–∑–±–µ–≥–∞–π—Ç–µ:\n"
                f"  - '–∂–µ–Ω—â–∏–Ω–∞', '—á–µ–ª–æ–≤–µ–∫', '–ª—é–¥–∏', '–ª–∏—Ü–æ'\n"
                f"  - '–ø–æ—Ä—Ç—Ä–µ—Ç', '—Ä–µ–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ'\n\n"
                f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                f"  - '–ø–µ—Ä—Å–æ–Ω–∞–∂', '—Å—É—â–µ—Å—Ç–≤–æ', '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'\n"
                f"  - –ë–æ–ª–µ–µ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è\n"
                f"  - –§–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–∏–µ –∏–ª–∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏\n\n"
                f"üîÑ –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –ø—Ä–æ–º—Ç —Å /start"
            )
        else:
            help_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:\n{error_text[:200]}\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ —Å /start"
        
        await processing_msg.edit_text(help_text)
        await state.clear()


async def show_all_scenes_and_photos_for_confirmation(message: types.Message, state: FSMContext):
    """‚úÖ –ù–û–í–û–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ö–ê–ñ–î–£–Æ –°–¶–ï–ù–£ + –µ—ë –§–û–¢–û –≤–º–µ—Å—Ç–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    data = await state.get_data()
    scenes = data.get("scenes", [])
    enhanced_prompt = data.get("enhanced_prompt", "")
    
    if not scenes:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç —Å—Ü–µ–Ω")
        return
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Ñ–æ—Ç–æ
    successful_photos_count = sum(1 for s in scenes if s.get("photo_url") or s.get("photo_path"))
    failed_photos_count = len(scenes) - successful_photos_count
    
    # ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ò–ù–§–û–†–ú–ê–¶–ò–Æ + –§–û–¢–û –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã
    for i, scene in enumerate(scenes, 1):
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å—Ü–µ–Ω—ã
        scene_text = f"üé¨ –°–¶–ï–ù–ê {i}/{len(scenes)}\n"
        scene_text += "‚îÄ" * 40 + "\n"
        scene_text += f"üìù –ü—Ä–æ–º—Ç: {scene.get('prompt', 'N/A')}\n"
        scene_text += f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {scene.get('duration', 5)} —Å–µ–∫\n"
        scene_text += f"üé® –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞: {scene.get('atmosphere', 'N/A')}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if scene.get("photo_error"):
            scene_text += f"\n‚ùå –û—à–∏–±–∫–∞: {scene.get('photo_error')[:100]}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å—Ü–µ–Ω—ã
        await message.answer(scene_text, parse_mode="Markdown")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è —ç—Ç–æ–π —Å—Ü–µ–Ω—ã (–µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å)
        photo_path = scene.get("photo_path")
        photo_url = scene.get("photo_url")
        
        if photo_path or photo_url:
            try:
                if photo_path:
                    # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                    photo_input = FSInputFile(photo_path)
                    await message.answer_photo(
                        photo=photo_input,
                        caption=f"üñºÔ∏è –§–æ—Ç–æ –¥–ª—è —Å—Ü–µ–Ω—ã {i} ‚úÖ"
                    )
                elif photo_url:
                    await message.answer_photo(
                        photo=photo_url,
                        caption=f"üñºÔ∏è –§–æ—Ç–æ –¥–ª—è —Å—Ü–µ–Ω—ã {i} ‚úÖ"
                    )
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å—Ü–µ–Ω—ã {i}: {e}")
                await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ —Å—Ü–µ–Ω—ã {i}: {str(e)[:80]}")
        else:
            error_reason = scene.get('photo_error', '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏')
            await message.answer(
                f"‚ö†Ô∏è –§–æ—Ç–æ –¥–ª—è —Å—Ü–µ–Ω—ã {i} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {error_reason}"
            )
    
    # –í –∫–æ–Ω—Ü–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    final_text = "=" * 50 + "\n"
    
    if failed_photos_count == 0:
        final_text += f"‚úÖ –í–°–ï {len(scenes)} –°–¶–ï–ù –ò –ò–• –§–û–¢–û –ì–û–¢–û–í–´!\n"
    else:
        final_text += f"‚ö†Ô∏è –°–¢–ê–¢–£–°: {successful_photos_count}/{len(scenes)} —Ñ–æ—Ç–æ –≥–æ—Ç–æ–≤—ã\n"
        final_text += f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {failed_photos_count} —Å—Ü–µ–Ω—ã\n"
    
    final_text += "=" * 50 + "\n\n"
    final_text += "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—à—å –ª–∏ –≤—Å–µ —Å—Ü–µ–Ω—ã –∏ —Ñ–æ—Ç–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ?"
    
    # –ö–Ω–æ–ø–∫–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Ç–æ–≥–æ, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∏
    if failed_photos_count > 0:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –ü–†–ò–ù–Ø–¢–¨ (–¥–∞–∂–µ —Å –æ—à–∏–±–∫–∞–º–∏)", callback_data="photo_ai_confirm_all_scenes"),
                    InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å –í–°–ï", callback_data="photo_ai_regenerate_photos")
                ],
                [
                    InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º—Ç", callback_data="photo_ai_edit_all_scenes"),
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
                ]
            ]
        )
    else:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –ü–†–ò–ù–Ø–¢–¨ –í–°–ï", callback_data="photo_ai_confirm_all_scenes"),
                    InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω—ã", callback_data="photo_ai_edit_all_scenes")
                ],
                [
                    InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ", callback_data="photo_ai_regenerate_photos"),
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
                ]
            ]
        )
    
    await message.answer(final_text, parse_mode="Markdown", reply_markup=keyboard)


async def show_scene_for_confirmation(message: types.Message, state: FSMContext, scene_index: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ü–µ–Ω—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ñ–æ—Ç–æ"""
    data = await state.get_data()
    scenes = data.get("scenes", [])
    
    if scene_index >= len(scenes):
        await start_photo_generation(message, state)
        return
    
    scene = scenes[scene_index]
    
    prompt_text = scene.get('prompt', '')
    indented_prompt = "\n".join("    " + line for line in prompt_text.split("\n"))
    
    scene_text = (
        f"üé¨ –°—Ü–µ–Ω–∞ {scene['id']} –∏–∑ {len(scenes)}\n"
        f"{'‚îÄ' * 40}\n\n"
        f"üìù –ü—Ä–æ–º—Ç –¥–ª—è —Ñ–æ—Ç–æ:\n{indented_prompt}\n\n"
        f"‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {scene.get('duration', 5)} —Å–µ–∫\n"
        f"üé® –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞: {scene.get('atmosphere', 'N/A')}\n\n"
        f"{'‚îÄ' * 40}\n"
        f"–ü–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –ø—Ä–æ–º—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ?"
    )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞–ª–µ–µ", callback_data=f"photo_ai_scene_approve_{scene_index}"),
                InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"photo_ai_scene_edit_{scene_index}")
            ],
            [
                InlineKeyboardButton(text="üîÑ –†–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ", callback_data="photo_ai_scenes_regenerate"),
                InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="back_to_menu")
            ]
        ]
    )
    
    await message.answer(scene_text, parse_mode="Markdown", reply_markup=keyboard)


@router.callback_query(lambda c: c.data == "photo_ai_confirm_all_scenes")
async def confirm_all_scenes(callback: types.CallbackQuery, state: FSMContext):
    """‚úÖ –ù–û–í–û–ï: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –í–°–ï –°–¶–ï–ù–´ + –§–û–¢–û ‚Üí –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ"""
    await callback.answer()
    
    data = await state.get_data()
    scenes = data.get("scenes", [])
    
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å start_video_generation_final()
    await state.update_data(scenes_with_photos=scenes)
    
    await callback.message.answer(
        f"‚è≥ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ –¥–ª—è {len(scenes)} —Å—Ü–µ–Ω...\n"
        f"üé¨ –≠—Ç–æ –∑–∞–π–º–µ—Ç 2-5 –º–∏–Ω—É—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ü–µ–Ω"
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
    await start_video_generation_final(callback.message, state)


@router.callback_query(lambda c: c.data == "photo_ai_regenerate_photos")
async def regenerate_all_photos(callback: types.CallbackQuery, state: FSMContext):
    """üîÑ –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ - –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ"""
    await callback.answer()
    
    data = await state.get_data()
    scenes = data.get("scenes", [])
    aspect_ratio = data.get("aspect_ratio", "16:9")
    
    processing_msg = await callback.message.answer(
        f"üîÑ –ü–µ—Ä–µ–¥–µ–ª–∞—é —Ñ–æ—Ç–æ –¥–ª—è –≤—Å–µ—Ö {len(scenes)} —Å—Ü–µ–Ω –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û...\n"
        f"‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç 1-2 –º–∏–Ω (—Å –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º –º–µ–∂–¥—É —Å—Ü–µ–Ω–∞–º–∏)..."
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –æ–±—Ä–∞—Ç–Ω–æ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ
    await state.set_state(PhotoAIStates.processing_prompt)
    
    try:
        photo_gen = PhotoGenerator()
        
        # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        photos_result = await photo_gen.generate_photos_for_scenes(
            scenes=scenes,
            aspect_ratio=aspect_ratio,
            reference_image_url=None,
            general_prompt=""
        )
        
        # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ü–µ–Ω—ã —Å —É–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ —Ñ–æ—Ç–æ
        final_scenes_with_photos = photos_result.get("scenes_with_photos", [])
        successful_photos = photos_result.get("successful_photos", 0)
        total_scenes = photos_result.get("total_scenes", len(final_scenes_with_photos))
        
        # ‚ö†Ô∏è –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ
        if successful_photos < total_scenes:
            failed_count = total_scenes - successful_photos
            logger.warning(
                f"‚ö†Ô∏è –ü–µ—Ä–µ–¥–µ–ª–∫–∞ —Ñ–æ—Ç–æ: {successful_photos}/{total_scenes} —É—Å–ø–µ—à–Ω–æ, "
                f"{failed_count} –æ—à–∏–±–æ–∫"
            )
        
        await state.update_data(scenes=final_scenes_with_photos)
        
        # ‚úÖ –°–û–•–†–ê–ù–Ø–ï–ú —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–¥–µ–ª–∫–∏ –≤ JSON
        enhanced_prompt = data.get("enhanced_prompt", "")
        await save_scenes_result_to_json(
            message=callback.message,
            scenes=final_scenes_with_photos,
            enhanced_prompt=enhanced_prompt,
            aspect_ratio=aspect_ratio
        )
        
        await state.set_state(PhotoAIStates.confirming_photos)
        
        await processing_msg.delete()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï –°–¶–ï–ù–´ + –í–°–ï –§–û–¢–û –µ—â–µ —Ä–∞–∑
        await show_all_scenes_and_photos_for_confirmation(callback.message, state)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–µ–ª—ã–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
        error_text = str(e)
        
        # ‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ E005
        if "E005" in error_text or "sensitive" in error_text.lower():
            help_text = (
                f"‚ùå –û—à–∏–±–∫–∞: –§–∏–ª—å—Ç—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ API –ø—Ä–∏ –ø–µ—Ä–µ–¥–µ–ª–∫–µ —Ñ–æ—Ç–æ\n\n"
                f"üí° –°–æ–≤–µ—Ç—ã:\n"
                f"- –ò–∑–±–µ–≥–∞–π—Ç–µ —Å–ª–æ–≤ –æ —Ä–µ–∞–ª—å–Ω—ã—Ö –ª—é–¥—è—Ö\n"
                f"- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è\n"
                f"- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –∏–ª–∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å"
            )
        else:
            help_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–µ–ª–∫–µ —Ñ–æ—Ç–æ:\n{error_text[:150]}"
        
        await processing_msg.edit_text(help_text)


@router.callback_query(lambda c: c.data == "photo_ai_edit_all_scenes")
async def edit_all_scenes(callback: types.CallbackQuery, state: FSMContext):
    """‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å—Ü–µ–Ω—ã"""
    await callback.answer()
    
    await callback.message.answer(
        "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω:\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π –ø—Ä–æ–º—Ç –¥–ª—è –≤—Å–µ—Ö —Å—Ü–µ–Ω,\n"
        "–∏ —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–¥–µ–ª–∞–µ—Ç —Ñ–æ—Ç–æ —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–æ–º—Ç–∞–º–∏."
    )
    
    await state.set_state(PhotoAIStates.waiting_prompt)


@router.callback_query(lambda c: c.data.startswith("photo_ai_scene_approve_"))
async def approve_scene(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã"""
    await callback.answer()
    
    scene_index = int(callback.data.replace("photo_ai_scene_approve_", ""))
    data = await state.get_data()
    scenes = data.get("scenes", [])
    
    next_index = scene_index + 1
    await state.update_data(current_scene_index=next_index)
    
    if next_index < len(scenes):
        await show_scene_for_confirmation(callback.message, state, next_index)
    else:
        await start_photo_generation(callback.message, state)


@router.callback_query(lambda c: c.data.startswith("photo_ai_scene_edit_"))
async def edit_scene(callback: types.CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º—Ç–∞ —Å—Ü–µ–Ω—ã"""
    await callback.answer()
    
    scene_index = int(callback.data.replace("photo_ai_scene_edit_", ""))
    await state.update_data(editing_scene_index=scene_index)
    await state.set_state(PhotoAIStates.editing_scene)
    
    data = await state.get_data()
    scenes = data.get("scenes", [])
    scene = scenes[scene_index]
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"photo_ai_edit_done_{scene_index}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="back_to_menu")]
        ]
    )
    
    await callback.message.answer(
        f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã {scene_index + 1}\n\n"
        f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º—Ç:\n{scene['prompt']}\n\n"
        f"–ù–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π –ø—Ä–æ–º—Ç –∏–ª–∏ –Ω–∞–∂–º–∏ –ì–æ—Ç–æ–≤–æ:",
        reply_markup=keyboard
    )


@router.message(PhotoAIStates.editing_scene)
async def process_scene_edit(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º—Ç–∞"""
    data = await state.get_data()
    scene_index = data.get("editing_scene_index", 0)
    scenes = data.get("scenes", [])
    
    if scene_index < len(scenes):
        scenes[scene_index]['prompt'] = message.text
        await state.update_data(scenes=scenes)
    
    await message.answer(f"‚úÖ –°—Ü–µ–Ω–∞ {scene_index + 1} –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    await state.set_state(PhotoAIStates.confirming_scenes)
    await show_scene_for_confirmation(message, state, scene_index)


@router.callback_query(lambda c: c.data.startswith("photo_ai_edit_done_"))
async def edit_scene_done(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await callback.answer()
    scene_index = int(callback.data.replace("photo_ai_edit_done_", ""))
    await state.set_state(PhotoAIStates.confirming_scenes)
    await show_scene_for_confirmation(callback.message, state, scene_index)


@router.callback_query(lambda c: c.data == "photo_ai_scenes_regenerate")
async def regenerate_scenes(callback: types.CallbackQuery, state: FSMContext):
    """–†–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å—Ü–µ–Ω"""
    await callback.answer()
    
    data = await state.get_data()
    prompt = data.get("prompt", "")
    
    await state.set_state(PhotoAIStates.processing_prompt)
    
    processing_msg = await callback.message.answer(
        "‚è≥ –†–µ–≥–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ü–µ–Ω—ã..."
    )
    
    try:
        generator = VideoGenerator()
        num_scenes = _extract_num_scenes_from_prompt(prompt)
        
        scenes_result = await generator.enhance_prompt_with_gpt(
            prompt=prompt,
            num_scenes=num_scenes,
            duration_per_scene=5
        )
        
        await state.update_data(
            scenes=scenes_result["scenes"],
            current_scene_index=0
        )
        
        await state.set_state(PhotoAIStates.confirming_scenes)
        await show_scene_for_confirmation(callback.message, state, 0)
        await processing_msg.delete()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}")


async def start_photo_generation_immediate(message: types.Message, state: FSMContext, status_msg=None):
    """–ù–û–í–´–ô –ø—Ä–æ—Ü–µ—Å—Å: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ –°–†–ê–ó–£ –ø–æ—Å–ª–µ GPT —Ä–∞–∑–±–∏–µ–Ω–∏—è - –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û –¥–ª—è –≤—Å–µ—Ö —Å—Ü–µ–Ω
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ –≤–º–µ—Å—Ç–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ü–µ–Ω–µ (–ø—Ä–æ–º—Ç, –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
    –∫–∞–∫ —Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–æ–º, —Ç–∞–∫ –∏ –±–µ–∑ –Ω–µ–≥–æ
    """
    data = await state.get_data()
    scenes = data.get("scenes", [])
    aspect_ratio = data.get("aspect_ratio", "16:9")
    reference_url = data.get("reference_url")
    general_prompt = data.get("enhanced_prompt", "")
    
    await state.set_state(PhotoAIStates.generating_photos)
    
    try:
        photo_gen = PhotoGenerator()
        
        # –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ –¥–ª—è –≤—Å–µ—Ö —Å—Ü–µ–Ω —Å –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º
        logger.info(f"üì∏ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ñ–æ—Ç–æ –¥–ª—è {len(scenes)} —Å—Ü–µ–Ω –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û...")
        logger.info(f"   –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {aspect_ratio}")
        logger.info(f"   –†–µ—Ñ–µ—Ä–µ–Ω—Å: {'–î–ê üì∏' if reference_url else '–ù–ï–¢'}")
        logger.info(f"   –ö–∞–∂–¥–æ–µ —Ñ–æ—Ç–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ")
        
        # ‚úÖ generate_photos_for_scenes —É–∂–µ async, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ await
        photos_result = await photo_gen.generate_photos_for_scenes(
            scenes=scenes,
            aspect_ratio=aspect_ratio,
            reference_image_url=reference_url,
            general_prompt=general_prompt
        )
        
        if photos_result["status"] == "success":
            scenes_with_photos = photos_result["scenes_with_photos"]
            successful = photos_result["successful_photos"]
            total = photos_result["total_scenes"]
            
            await state.update_data(
                scenes_with_photos=scenes_with_photos,
                current_scene_index=0
            )
            
            # ‚úÖ –°–û–•–†–ê–ù–Ø–ï–ú —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON
            enhanced_prompt = general_prompt or data.get("enhanced_prompt", "")
            await save_scenes_result_to_json(
                message=message,
                scenes=scenes_with_photos,
                enhanced_prompt=enhanced_prompt,
                aspect_ratio=aspect_ratio
            )
            
            await state.set_state(PhotoAIStates.confirming_photos)
            
            # –£–¥–∞–ª—è—é —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            if status_msg:
                try:
                    await status_msg.delete()
                except:
                    pass
            
            logger.info(f"‚úÖ –§–æ—Ç–æ –≥–æ—Ç–æ–≤—ã! –£—Å–ø–µ—à–Ω–æ: {successful}/{total}")
            
            # ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            await show_photo_for_confirmation(message, state, 0)
            
        else:
            error = photos_result.get("error", "Unknown error")
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {error}")
            if status_msg:
                await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {error}")
            await state.clear()
            
    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ: {e}", exc_info=True)
        if status_msg:
            await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:150]}")
        await state.clear()


async def start_photo_generation(message: types.Message, state: FSMContext):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ (—Å—Ç–∞—Ä—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —Å—Ü–µ–Ω)"""
    data = await state.get_data()
    scenes = data.get("scenes", [])
    aspect_ratio = data.get("aspect_ratio", "16:9")
    reference_url = data.get("reference_url")
    general_prompt = data.get("enhanced_prompt", "")
    
    generating_msg = await message.answer(
        f"üé® –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ñ–æ—Ç–æ –¥–ª—è {len(scenes)} —Å—Ü–µ–Ω...\n\n"
        f"üé¨ google/nano-banana –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ\n"
        f"({'—Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–æ–º' if reference_url else '–±–µ–∑ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞'})\n\n"
        f"‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç..."
    )
    
    await state.set_state(PhotoAIStates.generating_photos)
    
    try:
        photo_gen = PhotoGenerator()
        
        photos_result = await photo_gen.generate_photos_for_scenes(
            scenes=scenes,
            aspect_ratio=aspect_ratio,
            reference_image_url=reference_url,
            general_prompt=general_prompt
        )
        
        if photos_result["status"] == "success":
            scenes_with_photos = photos_result["scenes_with_photos"]
            successful = photos_result["successful_photos"]
            
            await state.update_data(scenes_with_photos=scenes_with_photos)
            
            # ‚úÖ –°–û–•–†–ê–ù–Ø–ï–ú —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON
            await save_scenes_result_to_json(
                message=message,
                scenes=scenes_with_photos,
                enhanced_prompt=general_prompt,
                aspect_ratio=aspect_ratio
            )
            
            await state.set_state(PhotoAIStates.confirming_photos)
            
            await generating_msg.edit_text(
                f"‚úÖ –§–æ—Ç–æ –≥–æ—Ç–æ–≤—ã!\n\n"
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"  –í—Å–µ–≥–æ —Å—Ü–µ–Ω: {photos_result['total_scenes']}\n"
                f"  –£—Å–ø–µ—à–Ω–æ: {successful}\n\n"
                f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—à—å —ç—Ç–∏ —Ñ–æ—Ç–æ –¥–ª—è –≤–∏–¥–µ–æ?"
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞—é –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
            await show_photo_for_confirmation(message, state, 0)
            
        else:
            error = photos_result.get("error", "Unknown error")
            await generating_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {error}")
            await state.clear()
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ: {e}")
        await generating_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}")
        await state.clear()


async def show_photo_for_confirmation(message: types.Message, state: FSMContext, scene_index: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ü–µ–Ω–µ, –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç:
    - –ù–æ–º–µ—Ä —Å—Ü–µ–Ω—ã –∏ —Ñ–æ—Ç–æ
    - –ü–æ–ª–Ω—ã–π –ø—Ä–æ–º—Ç
    - –ê—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞
    - –§–æ—Ç–æ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    """
    data = await state.get_data()
    scenes_with_photos = data.get("scenes_with_photos", [])
    reference_url = data.get("reference_url")
    aspect_ratio = data.get("aspect_ratio", "16:9")
    
    if scene_index >= len(scenes_with_photos):
        await start_video_generation_final(message, state)
        return
    
    scene = scenes_with_photos[scene_index]
    photo_url = scene.get("photo_url")
    
    if not photo_url:
        error_msg = scene.get("photo_error", "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        text = (
            f"‚ö†Ô∏è –°—Ü–µ–Ω–∞ {scene_index + 1}: –û—à–∏–±–∫–∞\n"
            f"{'‚îÄ' * 50}\n"
            f"{error_msg}\n\n"
            f"–ü—Ä–æ–ø—É—Å–∫–∞—é —ç—Ç—É —Å—Ü–µ–Ω—É..."
        )
        await message.answer(text)
        
        next_index = scene_index + 1
        await state.update_data(current_scene_index=next_index)
        await show_photo_for_confirmation(message, state, next_index)
        return
    
    prompt_full = scene.get('prompt', '')
    atmosphere = scene.get('atmosphere', 'N/A')
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞
    reference_info = "üì∏ –° —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–æ–º" if reference_url else "üé® –ë–µ–∑ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞"
    
    scene_text = (
        f"üñºÔ∏è –§–æ—Ç–æ {scene_index + 1} –∏–∑ {len(scenes_with_photos)}\n"
        f"{'‚ïê' * 50}\n\n"
        f"üìù **–ü—Ä–æ–º—Ç –¥–ª—è —Ñ–æ—Ç–æ:**\n"
        f"{prompt_full}\n\n"
        f"{'‚îÄ' * 50}\n"
        f"‚è±Ô∏è  **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** 5 —Å–µ–∫\n"
        f"üé® **–ê—Ç–º–æ—Å—Ñ–µ—Ä–∞:** {atmosphere}\n"
        f"üìê **–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ:** {aspect_ratio}\n"
        f"üé¨ **–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä:** google/nano-banana {reference_info}\n"
        f"{'‚ïê' * 50}\n\n"
        f"–ü–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ?"
    )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞–ª–µ–µ", callback_data=f"photo_ai_photo_approve_{scene_index}"),
                InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å", callback_data=f"photo_ai_photo_regen_{scene_index}")
            ],
            [
                InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º—Ç", callback_data=f"photo_ai_photo_edit_{scene_index}")
            ],
            [
                InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –≤—Å–µ", callback_data="photo_ai_photos_final"),
                InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="back_to_menu")
            ]
        ]
    )
    
    try:
        if scene.get("photo_path"):
            await message.answer_photo(
                types.FSInputFile(scene["photo_path"]),
                caption=scene_text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        else:
            await message.answer(scene_text, reply_markup=keyboard, parse_mode="Markdown")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await message.answer(scene_text, reply_markup=keyboard, parse_mode="Markdown")


@router.callback_query(lambda c: c.data.startswith("photo_ai_photo_approve_"))
async def approve_photo(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ñ–æ—Ç–æ"""
    await callback.answer()
    scene_index = int(callback.data.replace("photo_ai_photo_approve_", ""))
    
    next_index = scene_index + 1
    await state.update_data(current_scene_index=next_index)
    
    data = await state.get_data()
    scenes_with_photos = data.get("scenes_with_photos", [])
    
    if next_index < len(scenes_with_photos):
        await show_photo_for_confirmation(callback.message, state, next_index)
    else:
        await start_video_generation_final(callback.message, state)


@router.callback_query(lambda c: c.data.startswith("photo_ai_photo_regen_"))
async def regenerate_photo(callback: types.CallbackQuery, state: FSMContext):
    """–†–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ü–µ–Ω—ã"""
    await callback.answer()
    scene_index = int(callback.data.replace("photo_ai_photo_regen_", ""))
    
    data = await state.get_data()
    scenes_with_photos = data.get("scenes_with_photos", [])
    aspect_ratio = data.get("aspect_ratio", "16:9")
    reference_url = data.get("reference_url")
    general_prompt = data.get("enhanced_prompt", "")
    
    if scene_index >= len(scenes_with_photos):
        await callback.message.answer("‚ùå –°—Ü–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    scene = scenes_with_photos[scene_index]
    
    regenerating_msg = await callback.message.answer(
        f"üé® –†–µ–≥–µ–Ω–µ—Ä–∏—Ä—É—é —Ñ–æ—Ç–æ –¥–ª—è —Å—Ü–µ–Ω—ã {scene_index + 1}...\n"
        f"‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–∏–Ω—É—Ç—É..."
    )
    
    try:
        photo_gen = PhotoGenerator()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–¥–Ω–æ —Ñ–æ—Ç–æ
        prompt = scene.get('prompt', general_prompt)
        result = await photo_gen._generate_single_photo(
            prompt=prompt,
            aspect_ratio=aspect_ratio,
            reference_image_url=reference_url,
            scene_index=scene_index
        )
        
        if result.get("status") == "success":
            # –û–±–Ω–æ–≤–ª—è—é —Å—Ü–µ–Ω—É —Å –Ω–æ–≤—ã–º —Ñ–æ—Ç–æ
            scene["photo_url"] = result.get("photo_url")
            scene["photo_path"] = result.get("photo_path")
            
            scenes_with_photos[scene_index] = scene
            await state.update_data(scenes_with_photos=scenes_with_photos)
            
            await regenerating_msg.delete()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
            await state.set_state(PhotoAIStates.confirming_photos)
            await show_photo_for_confirmation(callback.message, state, scene_index)
        else:
            error = result.get("error", "Unknown error")
            await regenerating_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {error}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ: {e}")
        await regenerating_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}")


@router.callback_query(lambda c: c.data.startswith("photo_ai_photo_edit_"))
async def edit_photo_prompt(callback: types.CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º—Ç–∞ –¥–ª—è —Ñ–æ—Ç–æ"""
    await callback.answer()
    scene_index = int(callback.data.replace("photo_ai_photo_edit_", ""))
    
    await state.update_data(editing_photo_index=scene_index)
    await state.set_state(PhotoAIStates.editing_scene)
    
    data = await state.get_data()
    scenes_with_photos = data.get("scenes_with_photos", [])
    
    if scene_index >= len(scenes_with_photos):
        await callback.message.answer("‚ùå –°—Ü–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    scene = scenes_with_photos[scene_index]
    current_prompt = scene.get('prompt', '')
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"photo_ai_photo_edit_done_{scene_index}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="back_to_menu")]
        ]
    )
    
    await callback.message.answer(
        f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º—Ç–∞ –¥–ª—è —Å—Ü–µ–Ω—ã {scene_index + 1}\n\n"
        f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º—Ç:\n{current_prompt}\n\n"
        f"–ù–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π –ø—Ä–æ–º—Ç –∏–ª–∏ –Ω–∞–∂–º–∏ –ì–æ—Ç–æ–≤–æ:",
        reply_markup=keyboard
    )


@router.message(PhotoAIStates.editing_scene)
async def process_photo_prompt_edit(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º—Ç–∞ –¥–ª—è —Ñ–æ—Ç–æ"""
    data = await state.get_data()
    scene_index = data.get("editing_photo_index")
    
    if scene_index is not None:
        scenes_with_photos = data.get("scenes_with_photos", [])
        
        if scene_index < len(scenes_with_photos):
            scenes_with_photos[scene_index]['prompt'] = message.text
            await state.update_data(scenes_with_photos=scenes_with_photos)
            await message.answer(f"‚úÖ –ü—Ä–æ–º—Ç —Å—Ü–µ–Ω—ã {scene_index + 1} –æ–±–Ω–æ–≤–ª–µ–Ω!")
    
    await state.set_state(PhotoAIStates.confirming_photos)


@router.callback_query(lambda c: c.data.startswith("photo_ai_photo_edit_done_"))
async def photo_edit_done(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º—Ç–∞ –∏ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ"""
    await callback.answer()
    scene_index = int(callback.data.replace("photo_ai_photo_edit_done_", ""))
    
    data = await state.get_data()
    scenes_with_photos = data.get("scenes_with_photos", [])
    aspect_ratio = data.get("aspect_ratio", "16:9")
    reference_url = data.get("reference_url")
    general_prompt = data.get("enhanced_prompt", "")
    
    if scene_index >= len(scenes_with_photos):
        await callback.message.answer("‚ùå –°—Ü–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    scene = scenes_with_photos[scene_index]
    
    regenerating_msg = await callback.message.answer(
        f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –ø—Ä–æ–º—Ç–æ–º...\n"
        f"‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–∏–Ω—É—Ç—É..."
    )
    
    try:
        photo_gen = PhotoGenerator()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–¥–Ω–æ —Ñ–æ—Ç–æ —Å –Ω–æ–≤—ã–º –ø—Ä–æ–º—Ç–æ–º
        prompt = scene.get('prompt', general_prompt)
        result = await photo_gen._generate_single_photo(
            prompt=prompt,
            aspect_ratio=aspect_ratio,
            reference_image_url=reference_url,
            scene_index=scene_index
        )
        
        if result.get("status") == "success":
            # –û–±–Ω–æ–≤–ª—è—é —Å—Ü–µ–Ω—É —Å –Ω–æ–≤—ã–º —Ñ–æ—Ç–æ
            scene["photo_url"] = result.get("photo_url")
            scene["photo_path"] = result.get("photo_path")
            
            scenes_with_photos[scene_index] = scene
            await state.update_data(scenes_with_photos=scenes_with_photos)
            
            await regenerating_msg.delete()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
            await state.set_state(PhotoAIStates.confirming_photos)
            await show_photo_for_confirmation(callback.message, state, scene_index)
        else:
            error = result.get("error", "Unknown error")
            await regenerating_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {error}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await regenerating_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}")


@router.callback_query(lambda c: c.data == "photo_ai_photos_final")
async def approve_all_photos(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–∏–Ω—è—Ç–∏–µ –≤—Å–µ—Ö —Ñ–æ—Ç–æ"""
    await callback.answer()
    await start_video_generation_final(callback.message, state)


async def start_video_generation_final(message: types.Message, state: FSMContext):
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ç–æ"""
    data = await state.get_data()
    scenes_with_photos = data.get("scenes_with_photos", [])
    aspect_ratio = data.get("aspect_ratio", "16:9")
    model = data.get("model", "kwaivgi/kling-v2.5-turbo-pro")
    
    generating_msg = await message.answer(
        f"üé¨ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ç–æ!\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"  –°—Ü–µ–Ω: {len(scenes_with_photos)}\n"
        f"  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {len(scenes_with_photos) * 5} —Å–µ–∫\n"
        f"  –ú–æ–¥–µ–ª—å: Kling v2.5 Turbo Pro\n\n"
        f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã..."
    )
    
    await state.set_state(PhotoAIStates.generating_video)
    
    try:
        generator = VideoGenerator()
        stitcher = VideoStitcher()
        
        video_paths = []
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã —Å —Ñ–æ—Ç–æ
        for idx, scene in enumerate(scenes_with_photos):
            scene_num = idx + 1
            logger.info(f"üé• –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ –¥–ª—è —Å—Ü–µ–Ω—ã {scene_num}/{len(scenes_with_photos)}...")
            
            await generating_msg.edit_text(
                f"üé¨ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ ({scene_num}/{len(scenes_with_photos)})...\n\n"
                f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {int(scene_num / len(scenes_with_photos) * 100)}%"
            )
            
            photo_url = scene.get("photo_url")
            if not photo_url:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è —Å—Ü–µ–Ω—ã {scene_num}, –ø—Ä–æ–ø—É—Å–∫–∞—é")
                continue
            
            result = await generator.generate_scene(
                prompt=scene.get("prompt", ""),
                duration=5,
                aspect_ratio=aspect_ratio,
                model="kling",
                start_image_url=photo_url  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ç–æ –∫–∞–∫ –Ω–∞—á–∞–ª—å–Ω—ã–π —Ñ—Ä–µ–π–º
            )
            
            if result.get("status") == "success":
                video_url = result.get("video_url")
                video_path = await stitcher.download_video(
                    video_url,
                    f"scene_{scene_num}.mp4"
                )
                
                if video_path:
                    video_paths.append(video_path)
                    logger.info(f"‚úÖ –í–∏–¥–µ–æ —Å—Ü–µ–Ω—ã {scene_num} –≥–æ—Ç–æ–≤–æ")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω—ã {scene_num}")
        
        # –°–∫–ª–µ–∏–≤–∞—é –≤–∏–¥–µ–æ
        if video_paths:
            await generating_msg.edit_text("üéûÔ∏è –°–∫–ª–µ–∏–≤–∞—é –≤–∏–¥–µ–æ...")
            
            final_video = await stitcher.stitch_videos(video_paths)
            
            if final_video:
                await generating_msg.delete()
                
                await message.answer_video(
                    types.FSInputFile(final_video),
                    caption="‚úÖ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ! –°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é:\n"
                            "‚Ä¢ Google Nano-Banana (—Ñ–æ—Ç–æ)\n"
                            "‚Ä¢ Kling v2.5 Turbo Pro (–≤–∏–¥–µ–æ)"
                )
                
                await stitcher.cleanup_temp_files()
                logger.info("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            else:
                await generating_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–ª–µ–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ")
        else:
            await generating_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –¥–ª—è —Å—Ü–µ–Ω")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {e}")
        await generating_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}")
    
    finally:
        await state.clear()


def _extract_num_scenes_from_prompt(prompt: str) -> int:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω –∏–∑ –ø—Ä–æ–º—Ç–∞ - –∏—â–µ—Ç –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ï —á–∏—Å–ª–æ!
    
    –û–±—Ä–∞–±–æ—Ç–∞–µ—Ç:
    - –¶–∏—Ñ—Ä—ã: "1 —Å—Ü–µ–Ω–µ", "2 —Å—Ü–µ–Ω—ã", "–Ω–∞ 3 —Å—Ü–µ–Ω—ã"
    - –ü–æ—Ä—è–¥–∫–æ–≤—ã–µ —á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ: "–≤–æ –≤—Ç–æ—Ä–æ–π —Å—Ü–µ–Ω–µ", "–≤ —Ç—Ä–µ—Ç—å–µ–π —Å—Ü–µ–Ω–µ"
    """
    import re
    
    # ‚úÖ –ò—â—É –í–°–ï —á–∏—Å–ª–∞ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ —Å—Ü–µ–Ω–∞–º–∏
    patterns = [
        r'(\d+)\s*—Å—Ü–µ–Ω',          # "1 —Å—Ü–µ–Ω–µ", "2 —Å—Ü–µ–Ω—ã"
        r'(\d+)\s*scene',         # "1 scene", "2 scenes"
        r'–Ω–∞\s*(\d+)\s*—Å—Ü–µ–Ω',     # "–Ω–∞ 2 —Å—Ü–µ–Ω—ã"
        r'—Ä–∞–∑–±–∏—Ç—å –Ω–∞\s*(\d+)',    # "—Ä–∞–∑–±–∏—Ç—å –Ω–∞ 3"
        r'(\d+)\s*—á–∞—Å—Ç–µ–π',        # "3 —á–∞—Å—Ç–∏"
        r'split.*?(\d+)',         # "split 4"
        r'—Å—Ü–µ–Ω–∞\s*(\d+)',         # "—Å—Ü–µ–Ω–∞ 2"
        r'scene\s*(\d+)',         # "scene 3"
    ]
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø–æ—Ä—è–¥–∫–æ–≤—ã—Ö —á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –≤ —Ü–∏—Ñ—Ä—ã
    ordinal_map = {
        '–ø–µ—Ä–≤': 1, '–ø–µ—Ä–≤–∞—è': 1, '–ø–µ—Ä–≤–æ–π': 1, '–ø–µ—Ä–≤—É—é': 1,
        '–≤—Ç–æ—Ä': 2, '–≤—Ç–æ—Ä–∞—è': 2, '–≤—Ç–æ—Ä–æ–π': 2, '–≤—Ç–æ—Ä—É—é': 2,
        '—Ç—Ä–µ—Ç': 3, '—Ç—Ä–µ—Ç—å—è': 3, '—Ç—Ä–µ—Ç—å–µ–π': 3, '—Ç—Ä–µ—Ç—å—é': 3,
        '—á–µ—Ç–≤—ë—Ä—Ç': 4, '—á–µ—Ç–≤–µ—Ä—Ç–∞—è': 4, '—á–µ—Ç–≤—ë—Ä—Ç–æ–π': 4,
        '–ø—è—Ç': 5, '–ø—è—Ç–∞—è': 5, '–ø—è—Ç–æ–π': 5,
        '—à–µ—Å—Ç': 6, '—à–µ—Å—Ç–∞—è': 6, '—à–µ—Å—Ç–æ–π': 6,
        '—Å–µ–¥': 7, '—Å–µ–¥—å–º–∞—è': 7, '—Å–µ–¥—å–º–æ–π': 7,
        '–≤–æ—Å—å–º': 8, '–≤–æ—Å—å–º–∞—è': 8, '–≤–æ—Å—å–º–æ–π': 8,
        '–¥–µ–≤—è—Ç': 9, '–¥–µ–≤—è—Ç–∞—è': 9, '–¥–µ–≤—è—Ç–æ–π': 9,
        '–¥–µ—Å—è—Ç': 10, '–¥–µ—Å—è—Ç–∞—è': 10, '–¥–µ—Å—è—Ç–æ–π': 10,
    }
    
    found_numbers = []
    
    # –ò—â—É —Ü–∏—Ñ—Ä—ã –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö
    for pattern in patterns:
        matches = re.findall(pattern, prompt, re.IGNORECASE)
        for match in matches:
            num = int(match)
            if 1 <= num <= 20:
                found_numbers.append(num)
    
    # –ò—â—É –ø–æ—Ä—è–¥–∫–æ–≤—ã–µ —á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä "–≤–æ –≤—Ç–æ—Ä–æ–π —Å—Ü–µ–Ω–µ", "–≤ —Ç—Ä–µ—Ç—å–µ–π")
    ordinal_pattern = r'(–ø–µ—Ä–≤–æ–π|–ø–µ—Ä–≤—É—é|–≤—Ç–æ—Ä–∞—è|–≤—Ç–æ—Ä–æ–π|–≤—Ç–æ—Ä—É—é|—Ç—Ä–µ—Ç—å—è|—Ç—Ä–µ—Ç—å–µ–π|—Ç—Ä–µ—Ç—å—é|—á–µ—Ç–≤—ë—Ä—Ç–∞—è|—á–µ—Ç–≤—ë—Ä—Ç–æ–π|—á–µ—Ç–≤–µ—Ä—Ç–∞—è|—á–µ—Ç–≤–µ—Ä—Ç–æ–π|–ø—è—Ç–∞—è|–ø—è—Ç–æ–π|—à–µ—Å—Ç–∞—è|—à–µ—Å—Ç–æ–π|—Å–µ–¥—å–º–∞—è|—Å–µ–¥—å–º–æ–π|–≤–æ—Å—å–º–∞—è|–≤–æ—Å—å–º–æ–π|–¥–µ–≤—è—Ç–∞—è|–¥–µ–≤—è—Ç–æ–π|–¥–µ—Å—è—Ç–∞—è|–¥–µ—Å—è—Ç–æ–π)\s*—Å—Ü–µ–Ω'
    matches = re.findall(ordinal_pattern, prompt, re.IGNORECASE)
    for match in matches:
        match_lower = match.lower()
        # –ò—â—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä–µ
        for key, num in ordinal_map.items():
            if key in match_lower:
                found_numbers.append(num)
                break
    
    # ‚úÖ –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —á–∏—Å–ª–∞ - –±–µ—Ä—ë–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ (–¥–ª—è "1 —Å—Ü–µ–Ω–µ ... 2 —Å—Ü–µ–Ω–µ" –∏–ª–∏ "–≤ –ø–µ—Ä–≤–æ–π ... –≤–æ –≤—Ç–æ—Ä–æ–π")
    if found_numbers:
        return max(found_numbers)
    
    return 3  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 3 —Å—Ü–µ–Ω—ã