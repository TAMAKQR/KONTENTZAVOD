"""–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ google/nano-banana –¥–ª—è —Å—Ü–µ–Ω –≤–∏–¥–µ–æ"""
import asyncio
import json
import logging
import io
import base64
import os
from pathlib import Path
from typing import Dict, Optional, List
import aiohttp
import replicate
from config import REPLICATE_API_TOKEN

logger = logging.getLogger(__name__)


class PhotoGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ñ–æ—Ç–æ –ø–æ —Å—Ü–µ–Ω–∞–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º google/nano-banana"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Ñ–æ—Ç–æ"""
        if not REPLICATE_API_TOKEN:
            raise ValueError("‚ùå REPLICATE_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –î–æ–±–∞–≤—å –≤ .env")
        
        self.api_token = REPLICATE_API_TOKEN
        self.model = "google/nano-banana"  # –ú–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ
        self.temp_images_dir = Path("temp_images")
        self.temp_images_dir.mkdir(exist_ok=True)
        
        # ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ç–æ–∫–µ–Ω –¥–ª—è replicate
        os.environ["REPLICATE_API_TOKEN"] = REPLICATE_API_TOKEN
        logger.info(f"‚úÖ PhotoGenerator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–æ–¥–µ–ª—å—é: {self.model}")
        
    async def generate_photos_for_scenes(
        self,
        scenes: list,
        aspect_ratio: str = "16:9",
        reference_image_url: str = None,
        general_prompt: str = ""
    ) -> dict:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û —Å –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º
        
        –ö–∞–∂–¥–æ–µ —Ñ–æ—Ç–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–æ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ü–µ–Ω—ã –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏.
        
        Args:
            scenes: –°–ø–∏—Å–æ–∫ —Å—Ü–µ–Ω —Å –ø—Ä–æ–º—Ç–∞–º–∏
            aspect_ratio: –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω (16:9, 9:16, 1:1)
            reference_image_url: URL —Ä–µ—Ñ–µ—Ä–µ–Ω—Å-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            general_prompt: –û–±—â–∏–π –ø—Ä–æ–º—Ç –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
            
        Returns:
            {"status": "success", "scenes_with_photos": [...]} –∏–ª–∏ {"status": "error", "error": "..."}
        """
        logger.info(f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ñ–æ—Ç–æ –¥–ª—è {len(scenes)} —Å—Ü–µ–Ω –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û —Å –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º...")
        
        try:
            scenes_with_photos = []
            current_reference_url = reference_image_url  # –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–µ—Ñ–µ—Ä–µ–Ω—Å (–µ—Å–ª–∏ –µ—Å—Ç—å)
            
            for idx, scene in enumerate(scenes):
                logger.info(f"\nüì∏ –°—Ü–µ–Ω–∞ {idx + 1}/{len(scenes)} –æ–±—Ä–∞–±–æ—Ç–∫–∞...")
                
                # –°–æ–∑–¥–∞—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è —Ñ–æ—Ç–æ
                scene_prompt = self._create_photo_prompt(
                    scene=scene,
                    reference_image_url=current_reference_url,
                    general_prompt=general_prompt,
                    scene_index=idx,
                    total_scenes=len(scenes)
                )
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ñ–æ—Ç–æ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ü–µ–Ω—ã (–ñ–î–£ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!)
                photo_result = await self._generate_single_photo(
                    prompt=scene_prompt,
                    aspect_ratio=aspect_ratio,
                    reference_image_url=current_reference_url,
                    scene_index=idx
                )
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if photo_result["status"] == "success":
                    scene["photo_url"] = photo_result["photo_url"]
                    scene["photo_path"] = photo_result.get("photo_path")
                    scenes_with_photos.append(scene)
                    
                    # üîë –ö–õ–Æ–ß–ï–í–û–ô –ú–û–ú–ï–ù–¢: –§–æ—Ç–æ —Ç–µ–∫—É—â–µ–π —Å—Ü–µ–Ω—ã —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–æ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π!
                    current_reference_url = photo_result["photo_url"]
                    logger.info(f"‚úÖ –§–æ—Ç–æ —Å—Ü–µ–Ω—ã {idx + 1} –≥–æ—Ç–æ–≤–æ ‚Üí –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å –¥–ª—è —Å—Ü–µ–Ω—ã {idx + 2}")
                else:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ç–æ —Å—Ü–µ–Ω—ã {idx + 1}: {photo_result['error']}")
                    logger.info(f"‚ö†Ô∏è –ü–µ—Ä–µ—Ö–æ–¥—É –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ü–µ–Ω–µ –±–µ–∑ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞...")
                    scene["photo_url"] = None
                    scene["photo_error"] = photo_result["error"]
                    scenes_with_photos.append(scene)
                    # –ù–µ –º–µ–Ω—è–µ–º current_reference_url, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —É—Å–ø–µ—à–Ω–æ–µ —Ñ–æ—Ç–æ
                    # (–∏–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–µ—Ñ–µ—Ä–µ–Ω—Å, –µ—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ —Ñ–æ—Ç–æ –Ω–µ –±—ã–ª–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ)
            
            return {
                "status": "success",
                "scenes_with_photos": scenes_with_photos,
                "total_scenes": len(scenes),
                "successful_photos": sum(1 for s in scenes_with_photos if s.get("photo_url"))
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ: {e}")
            return {
                "status": "error",
                "error": str(e)
            }
    
    async def _generate_single_photo(
        self,
        prompt: str,
        aspect_ratio: str = "16:9",
        reference_image_url: str = None,
        scene_index: int = 0,
        retry_count: int = 0
    ) -> dict:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–¥–Ω–æ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ replicate API
        
        Args:
            prompt: –ü—Ä–æ–º—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            aspect_ratio: –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω (16:9, 9:16, 1:1)
            reference_image_url: URL —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            scene_index: –ò–Ω–¥–µ–∫—Å —Å—Ü–µ–Ω—ã
            retry_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (–¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ retry)
            
        Returns:
            {"status": "success", "photo_url": "..."} –∏–ª–∏ {"status": "error", "error": "..."}
        """
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è google/nano-banana
            # ‚úÖ –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π aspect_ratio (–Ω–µ match_input_image)
            # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Ñ–æ—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (16:9, 9:16, 1:1)
            # –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞
            determined_aspect_ratio = aspect_ratio
            
            input_params = {
                "prompt": prompt,
                "aspect_ratio": determined_aspect_ratio,  # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è Nano-Banana
                "output_format": "jpg"
            }
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å - –¥–æ–±–∞–≤–ª—è—é –µ–≥–æ –∫–∞–∫ –º–∞—Å—Å–∏–≤ (image_input)
            if reference_image_url:
                input_params["image_input"] = [reference_image_url]  # ‚úÖ –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤!
                logger.info(f"   üì∏ –†–µ—Ñ–µ—Ä–µ–Ω—Å: {reference_image_url[:80]}...")
                logger.info(f"   üìê –ò—Å–ø–æ–ª—å–∑—É–µ–º aspect_ratio='match_input_image' –¥–ª—è reference-—Ä–µ–∂–∏–º–∞")
            
            logger.info(f"üé¨ –í—ã–∑—ã–≤–∞—é replicate –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ (—Å—Ü–µ–Ω–∞ {scene_index + 1})...")
            logger.info(f"   üìù –ü—Ä–æ–º—Ç: {prompt[:80]}...")
            logger.info(f"   üìê –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {aspect_ratio}")
            if reference_image_url:
                logger.info(f"   ‚úÖ –° –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ—Ñ–µ—Ä–µ–Ω—Å-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            
            # –í—ã–∑—ã–≤–∞—é replicate –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–ë–ï–ó api_token –ø–∞—Ä–∞–º–µ—Ç—Ä–∞!)
            output = await asyncio.to_thread(
                replicate.run,
                self.model,
                input=input_params
            )
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            photo_url = None
            
            logger.info(f"üìä –¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç Replicate: {type(output)}")
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å File –æ–±—ä–µ–∫—Ç–æ–º, —Å–ø–∏—Å–æ–∫, –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞
            if hasattr(output, 'url'):
                # ‚úÖ File –æ–±—ä–µ–∫—Ç –æ—Ç Replicate
                # url –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ—Ç–æ–¥–æ–º –∏–ª–∏ —Å–≤–æ–π—Å—Ç–≤–æ–º
                url_attr = getattr(output, 'url')
                if callable(url_attr):
                    photo_url = url_attr()
                else:
                    photo_url = str(url_attr)
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω File –æ–±—ä–µ–∫—Ç: {photo_url[:100]}...")
            elif isinstance(output, list) and len(output) > 0:
                # ‚úÖ –°–ø–∏—Å–æ–∫ File –æ–±—ä–µ–∫—Ç–æ–≤ –∏–ª–∏ URLs
                if hasattr(output[0], 'url'):
                    url_attr = getattr(output[0], 'url')
                    if callable(url_attr):
                        photo_url = url_attr()
                    else:
                        photo_url = str(url_attr)
                    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ File –æ–±—ä–µ–∫—Ç–æ–≤: {photo_url[:100]}...")
                else:
                    photo_url = str(output[0])
                    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ URLs: {photo_url[:100]}...")
            elif isinstance(output, str):
                # ‚úÖ –°—Ç—Ä–æ–∫–∞ —Å URL
                photo_url = output
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ URL: {photo_url[:100]}...")
            else:
                logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {type(output)}")
                logger.error(f"   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {str(output)[:200]}")
                return {
                    "status": "error",
                    "error": f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {type(output)}"
                }
            
            if not photo_url:
                return {
                    "status": "error",
                    "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL —Ñ–æ—Ç–æ"
                }
            
            # –°–∫–∞—á–∏–≤–∞—é —Ñ–æ—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ
            photo_path = await self._download_photo(photo_url, scene_index)
            
            logger.info(f"‚úÖ –§–æ—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {photo_url}")
            
            return {
                "status": "success",
                "photo_url": photo_url,
                "photo_path": photo_path
            }
            
        except Exception as e:
            error_msg = str(e)
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ —Å—Ü–µ–Ω—ã {scene_index + 1}: {error_msg}")
            
            # ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ API
            if "E004" in error_msg and retry_count < 3:
                # E004 - Service is temporarily unavailable
                logger.warning(f"‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (E004, –ø–æ–ø—ã—Ç–∫–∞ {retry_count + 1}/3) - –ø—ã—Ç–∞—é—Å—å –µ—â–µ —Ä–∞–∑...")
                
                # –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
                wait_time = 5 + (retry_count * 3)
                logger.info(f"‚è≥ –ñ–¥—É {wait_time} —Å–µ–∫ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                await asyncio.sleep(wait_time)
                
                # –ù–∞ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–µ - –ø—Ä–æ–±—É–µ–º —É–ø—Ä–æ—Å—Ç–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                if retry_count < 1:
                    # –ü–æ–ø—ã—Ç–∫–∞ 1: –∫–∞–∫ –µ—Å—Ç—å, –Ω–æ –∂–¥–µ–º
                    return await self._generate_single_photo(
                        prompt=prompt,
                        aspect_ratio=aspect_ratio,
                        reference_image_url=reference_image_url,
                        scene_index=scene_index,
                        retry_count=retry_count + 1
                    )
                elif retry_count < 2:
                    # –ü–æ–ø—ã—Ç–∫–∞ 2: –±–µ–∑ reference
                    logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ 2: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ë–ï–ó reference")
                    return await self._generate_single_photo(
                        prompt=prompt,
                        aspect_ratio=aspect_ratio,
                        reference_image_url=None,
                        scene_index=scene_index,
                        retry_count=retry_count + 1
                    )
                else:
                    # –ü–æ–ø—ã—Ç–∫–∞ 3: —É–ø—Ä–æ—â–∞–µ–º –ø—Ä–æ–º—Ç
                    logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ 3: —É–ø—Ä–æ—â–∞—é –ø—Ä–æ–º—Ç")
                    simplified_prompt = self._simplify_prompt_for_api(prompt)
                    return await self._generate_single_photo(
                        prompt=simplified_prompt,
                        aspect_ratio=aspect_ratio,
                        reference_image_url=None,
                        scene_index=scene_index,
                        retry_count=retry_count + 1
                    )
            
            elif "E005" in error_msg and retry_count < 2:
                # E005 - –§–∏–ª—å—Ç—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (sensitive content)
                logger.warning(f"‚ö†Ô∏è –§–∏–ª—å—Ç—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (E005) - –ø—ã—Ç–∞—é—Å—å —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø—Ä–æ–º—Ç–æ–º...")
                
                # –û—á–∏—â–∞—é –ø—Ä–æ–º—Ç –æ—Ç "–æ–ø–∞—Å–Ω—ã—Ö" —Å–ª–æ–≤
                sanitized_prompt = self._sanitize_prompt_for_safety(prompt)
                logger.info(f"üîÑ –ü–µ—Ä–µ–¥–µ–ª–∞—é —Å –æ—á–∏—â–µ–Ω–Ω—ã–º –ø—Ä–æ–º—Ç–æ–º: {sanitized_prompt[:80]}...")
                
                # Retry —Å –æ—á–∏—â–µ–Ω–Ω—ã–º –ø—Ä–æ–º—Ç–æ–º
                return await self._generate_single_photo(
                    prompt=sanitized_prompt,
                    aspect_ratio=aspect_ratio,
                    reference_image_url=reference_image_url,
                    scene_index=scene_index,
                    retry_count=retry_count + 1
                )
            
            elif "E6716" in error_msg and retry_count < 3:
                # E6716 - Unexpected error handling prediction (–æ—Ç Replicate API)
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API (E6716, –ø–æ–ø—ã—Ç–∫–∞ {retry_count + 1}/3) - –ø—ã—Ç–∞—é—Å—å –µ—â–µ —Ä–∞–∑...")
                
                # –ù–∞ –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–µ retry - –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                if retry_count == 0:
                    await asyncio.sleep(3)
                    logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ 1: –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
                    return await self._generate_single_photo(
                        prompt=prompt,
                        aspect_ratio=aspect_ratio,
                        reference_image_url=reference_image_url,
                        scene_index=scene_index,
                        retry_count=retry_count + 1
                    )
                
                # –ù–∞ –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–µ - –ø—Ä–æ–±—É–µ–º –±–µ–∑ reference –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
                elif retry_count == 1:
                    await asyncio.sleep(3)
                    logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ 2: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ë–ï–ó reference –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è")
                    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –±–µ–∑ reference_image_url
                    return await self._generate_single_photo(
                        prompt=prompt,
                        aspect_ratio="16:9",  # –£–ø—Ä–æ—â–∞–µ–º aspect_ratio —Ç–æ–∂–µ
                        reference_image_url=None,  # –£–±–∏—Ä–∞–µ–º reference
                        scene_index=scene_index,
                        retry_count=retry_count + 1
                    )
                
                # –ù–∞ —Ç—Ä–µ—Ç—å–µ–π –ø–æ–ø—ã—Ç–∫–µ - —É–ø—Ä–æ—â–∞–µ–º —Å–∞–º –ø—Ä–æ–º—Ç (—É–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª–∏)
                elif retry_count == 2:
                    await asyncio.sleep(3)
                    logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ 3: —É–ø—Ä–æ—â–∞—é –ø—Ä–æ–º—Ç")
                    simplified_prompt = self._simplify_prompt_for_api(prompt)
                    logger.info(f"   –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–æ–º—Ç: {simplified_prompt[:100]}...")
                    return await self._generate_single_photo(
                        prompt=simplified_prompt,
                        aspect_ratio="16:9",
                        reference_image_url=None,
                        scene_index=scene_index,
                        retry_count=retry_count + 1
                    )
            
            return {
                "status": "error",
                "error": error_msg
            }
    
    async def _download_photo(self, photo_url: str, scene_index: int) -> str:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ"""
        try:
            import aiohttp
            
            photo_path = self.temp_images_dir / f"scene_{scene_index + 1}.png"
            
            async with aiohttp.ClientSession() as session:
                async with session.get(photo_url) as resp:
                    if resp.status == 200:
                        with open(photo_path, 'wb') as f:
                            f.write(await resp.read())
                        logger.info(f"üíæ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {photo_path}")
                        return str(photo_path)
                    else:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: HTTP {resp.status}")
                        return None
                        
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
            return None
    
    def _simplify_prompt_for_api(self, prompt: str) -> str:
        """
        –£–ø—Ä–æ—â–∞–µ—Ç –ø—Ä–æ–º—Ç –¥–ª—è API Replicate –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö E6716 –∏–ª–∏ E004
        
        –£–±–∏—Ä–∞–µ—Ç:
        - –õ–∏—à–Ω–∏–µ –¥–µ—Ç–∞–ª–∏ –æ –ø–æ–∑–∏—Ü–∏–∏ –∏ —Å—Ü–µ–Ω–∞—Ö
        - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
        - –û—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É
        - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø—Ä–æ –ë–ï–ó –¢–ï–ö–°–¢–ê
        """
        import re
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –¥–æ "–ê—Ç–º–æ—Å—Ñ–µ—Ä–∞" –∏–ª–∏ –ø–µ—Ä–≤—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ
        lines = prompt.split('\n')
        simplified = []
        has_no_text_instruction = False
        
        for line in lines:
            line = line.strip()
            if not line:
                continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø—Ä–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ç–µ–∫—Å—Ç–∞
            if '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞' in line or '–±–µ–∑ –Ω–∞–¥–ø–∏—Å–µ–π' in line or '–±–µ–∑ –ª–æ–≥–æ—Ç–∏–ø–æ–≤' in line:
                has_no_text_instruction = True
                continue
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            if line.startswith('–ü–æ–∑–∏—Ü–∏—è:') or line.startswith('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'):
                continue
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            if '–°—Ü–µ–Ω–∞' in line and '–∏–∑' in line:
                continue
            
            # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—Ä–æ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É
            if line.startswith('–ê—Ç–º–æ—Å—Ñ–µ—Ä–∞:'):
                simplified.append(line.replace('–ê—Ç–º–æ—Å—Ñ–µ—Ä–∞:', '').strip())
                break
            
            simplified.append(line)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        simplified_text = ' '.join(simplified)
        simplified_text = re.sub(r'\s+', ' ', simplified_text).strip()
        
        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
        if not simplified_text and prompt:
            simplified_text = prompt.split('\n')[0][:200]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø—Ä–æ –ë–ï–ó –¢–ï–ö–°–¢–ê –≤ –∫–æ–Ω–µ—Ü
        if has_no_text_instruction or '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞' in prompt:
            simplified_text += " (no text, no text overlays, clean image only)"
        
        logger.info(f"‚úÇÔ∏è –ü—Ä–æ–º—Ç —É–ø—Ä–æ—â–µ–Ω:")
        logger.info(f"   –î–æ: {prompt[:150]}...")
        logger.info(f"   –ü–æ—Å–ª–µ: {simplified_text[:150]}...")
        
        return simplified_text[:400]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 400 —Å–∏–º–≤–æ–ª–æ–≤
    
    def _sanitize_prompt_for_safety(self, prompt: str) -> str:
        """
        –û—á–∏—â–∞–µ—Ç –ø—Ä–æ–º—Ç –æ—Ç —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ E005
        
        –°–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã:
        - "–∂–µ–Ω—â–∏–Ω–∞", "–∂–µ–Ω—Å–∫–∏–π", "–ª–∏—Ü–æ", "—á–µ–ª–æ–≤–µ–∫", "–ª—é–¥–∏"
        - "—Ñ–æ—Ç–æ", "–ø–æ—Ä—Ç—Ä–µ—Ç", "—Ä–µ–∞–ª—å–Ω–æ–µ"
        
        –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –∑–∞–º–µ–Ω—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –Ω–∞ –æ–±—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
        """
        import re
        
        sanitized = prompt.lower()
        
        # –°–ª–æ–≤–∞/—Ñ—Ä–∞–∑—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç—å
        replacements = {
            r'\b–∂–µ–Ω—â–∏–Ω\w+': '–ø–µ—Ä—Å–æ–Ω–∞–∂',
            r'\b—á–µ–ª–æ–≤–µ–∫\w+': '—Å—É—â–µ—Å—Ç–≤–æ',
            r'\b–ª—é–¥–∏\w+': '—Å—É—â–µ—Å—Ç–≤–∞',
            r'\b–ª–∏—Ü\w+': '—á–µ—Ä—Ç—ã',
            r'\b–ø–æ—Ä—Ç—Ä–µ—Ç\w+': '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
            r'\b—Ä–µ–∞–ª—å–Ω\w+': '—Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ',
            r'\b—Ñ–æ—Ç–æ\w+': '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
            r'\b–∂–∏–≤–æ–µ\w+': '–¥–∏–Ω–∞–º–∏—á–Ω–æ–µ',
            r'\b–∫—Ä–∞—Å–∏–≤\w+': '—ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–µ',
            r'\b–ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω\w+': '–ø—Ä–∏–≤–ª–µ–∫–∞—é—â–µ–µ –≤–∑–≥–ª—è–¥',
            r'\b–∏–¥–µ–∞–ª\w+': '—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–µ',
        }
        
        # –ü—Ä–∏–º–µ–Ω—è—é –∑–∞–º–µ–Ω—ã
        for pattern, replacement in replacements.items():
            sanitized = re.sub(pattern, replacement, sanitized, flags=re.IGNORECASE | re.UNICODE)
        
        # –£–±–∏—Ä–∞—é –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
        sanitized = re.sub(r'\s+', ' ', sanitized).strip()
        
        logger.info(f"‚úÖ –ü—Ä–æ–º—Ç –æ—á–∏—â–µ–Ω –æ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤")
        logger.info(f"   –î–æ: {prompt[:100]}")
        logger.info(f"   –ü–æ—Å–ª–µ: {sanitized[:100]}")
        
        return sanitized

    def _create_photo_prompt(
        self,
        scene: dict,
        reference_image_url: str = None,
        general_prompt: str = "",
        scene_index: int = 0,
        total_scenes: int = 1
    ) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è google/nano-banana
        
        –£—á–∏—Ç—ã–≤–∞–µ—Ç:
        - –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º—Ç —Å—Ü–µ–Ω—ã
        - –ê—Ç–º–æ—Å—Ñ–µ—Ä—É
        - –ü–æ–∑–∏—Ü–∏—é –≤ –≤–∏–¥–µ–æ (–¥–ª—è –ø–ª–∞–≤–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤)
        - –û–±—â–∏–π —Å—Ç–∏–ª—å –≤–∏–¥–µ–æ
        - ‚úÖ –ë–ï–ó –¢–ï–ö–°–¢–ê –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        """
        
        scene_prompt = scene.get("prompt", "")
        atmosphere = scene.get("atmosphere", "")
        duration = scene.get("duration", 5)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å - —É–∫–∞–∑—ã–≤–∞—é –µ–≥–æ –≤ –ø—Ä–æ–º—Ç–µ
        reference_instruction = ""
        if reference_image_url:
            reference_instruction = "–°—Ç–∏–ª—å –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. "
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
        position_context = f"–°—Ü–µ–Ω–∞ {scene_index + 1} –∏–∑ {total_scenes}"
        if scene_index > 0:
            position_context += " - –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ü–µ–Ω—ã, –ø–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥"
        if scene_index < total_scenes - 1:
            position_context += " - –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ü–µ–Ω–µ"
        
        # ‚úÖ –§–æ—Ä–º–∏—Ä—É—é —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º—Ç –ë–ï–ó –¢–ï–ö–°–¢–ê
        extended_prompt = (
            f"{reference_instruction}"
            f"{scene_prompt}\n"
            f"–ê—Ç–º–æ—Å—Ñ–µ—Ä–∞: {atmosphere}\n"
            f"–ü–æ–∑–∏—Ü–∏—è: {position_context}\n"
            f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ü–µ–Ω—ã: {duration} —Å–µ–∫—É–Ω–¥\n"
            f"‚ö†Ô∏è –í–ê–ñ–ù–û: –ë–µ–∑ —Ç–µ–∫—Å—Ç–∞, –±–µ–∑ –Ω–∞–¥–ø–∏—Å–µ–π, –±–µ–∑ –ª–æ–≥–æ—Ç–∏–ø–æ–≤, —á–∏—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
        )
        
        if general_prompt:
            extended_prompt += f"–û–±—â–∏–π —Å—Ç–∏–ª—å: {general_prompt}"
        
        return extended_prompt.strip()
    
    def _aspect_ratio_to_resolution(self, aspect_ratio: str) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ"""
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è google/nano-banana
        resolutions = {
            "16:9": "768x432",   # HD –∞–ª—å–±–æ–º–Ω—ã–π
            "9:16": "432x768",   # –ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π
            "1:1": "512x512",    # –ö–≤–∞–¥—Ä–∞—Ç
        }
        
        return resolutions.get(aspect_ratio, "768x432")
    
    async def generate_intermediate_frames(
        self,
        start_photo_url: str,
        end_photo_url: str,
        num_frames: int = 3,
        aspect_ratio: str = "16:9"
    ) -> list:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ñ—Ä–µ–π–º—ã –º–µ–∂–¥—É –¥–≤—É–º—è —Ñ–æ—Ç–æ
        (–¥–ª—è –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏ –º–µ–∂–¥—É —Å—Ü–µ–Ω–∞–º–∏)
        
        Args:
            start_photo_url: URL –ø–µ—Ä–≤–æ–≥–æ —Ñ–æ—Ç–æ
            end_photo_url: URL —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ç–æ
            num_frames: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ñ—Ä–µ–π–º–æ–≤
            aspect_ratio: –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
            
        Returns:
            –°–ø–∏—Å–æ–∫ URL –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ñ—Ä–µ–π–º–æ–≤
        """
        logger.info(f"üé¨ –ì–µ–Ω–µ—Ä–∏—Ä—É—é {num_frames} –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ñ—Ä–µ–π–º–æ–≤...")
        
        intermediate_frames = [start_photo_url]
        
        try:
            for i in range(num_frames):
                # –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–µ–∂–¥—É —Ñ–æ—Ç–æ
                blend_ratio = (i + 1) / (num_frames + 1)
                
                prompt = (
                    f"–ü–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É –¥–≤—É–º—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏. "
                    f"–ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è {int(blend_ratio * 100)}% "
                    f"–æ—Ç –ø–µ—Ä–≤–æ–≥–æ –∫ –≤—Ç–æ—Ä–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é."
                )
                
                photo_result = await self._generate_single_photo(
                    prompt=prompt,
                    aspect_ratio=aspect_ratio,
                    reference_image_url=start_photo_url,
                    scene_index=i
                )
                
                if photo_result["status"] == "success":
                    intermediate_frames.append(photo_result["photo_url"])
                    logger.info(f"‚úÖ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ñ—Ä–µ–π–º {i + 1} –≥–æ—Ç–æ–≤")
                else:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ—Ä–µ–π–º–∞ {i + 1}: {photo_result['error']}")
            
            intermediate_frames.append(end_photo_url)
            return intermediate_frames
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ñ—Ä–µ–π–º–æ–≤: {e}")
            return [start_photo_url, end_photo_url]
    
    def cleanup_temp_images(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            import shutil
            if self.temp_images_dir.exists():
                shutil.rmtree(self.temp_images_dir)
                logger.info("üóëÔ∏è  –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")