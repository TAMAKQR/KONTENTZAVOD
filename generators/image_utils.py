"""–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"""
import asyncio
import logging
import sys
from pathlib import Path
import aiohttp
import requests
import replicate
from typing import Optional, Dict, Tuple

sys.path.insert(0, str(Path(__file__).parent.parent))

from aiogram import Bot
from PIL import Image
import io
from src.config import IMGBB_API_KEY, REPLICATE_API_TOKEN

logger = logging.getLogger(__name__)


class ImageUploader:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –æ–±–ª–∞–∫–æ"""
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ç–æ
    MIN_WIDTH = 512
    MIN_HEIGHT = 512
    RECOMMENDED_WIDTH = 1280
    RECOMMENDED_HEIGHT = 720
    MAX_FILE_SIZE_MB = 10
    
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
    SUPPORTED_RATIOS = {
        "16:9": (16, 9),
        "9:16": (9, 16),
        "1:1": (1, 1)
    }
    
    def __init__(self, imgbb_api_key: str = IMGBB_API_KEY, replicate_token: str = REPLICATE_API_TOKEN):
        self.imgbb_api_key = imgbb_api_key
        self.imgbb_url = "https://api.imgbb.com/1/upload"
        self.replicate_token = replicate_token
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Replicate –∫–ª–∏–µ–Ω—Ç
        if self.replicate_token:
            replicate.api_token = self.replicate_token
    
    async def download_telegram_photo(self, bot: Bot, file_id: str) -> Optional[bytes]:
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ —Å Telegram —Å–µ—Ä–≤–µ—Ä–∞
        
        Args:
            bot: Aiogram Bot instance
            file_id: Telegram file_id
            
        Returns:
            Bytes —Ñ–æ—Ç–æ –∏–ª–∏ None –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            file = await bot.get_file(file_id)
            file_path = file.file_path
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            async with aiohttp.ClientSession() as session:
                url = f"https://api.telegram.org/file/bot{bot.token}/{file_path}"
                async with session.get(url) as response:
                    if response.status == 200:
                        photo_bytes = await response.read()
                        logger.info(f"‚úÖ –§–æ—Ç–æ —Å–∫–∞—á–∞–Ω–æ —Å Telegram ({len(photo_bytes)} bytes)")
                        return photo_bytes
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ: —Å—Ç–∞—Ç—É—Å {response.status}")
                        return None
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–æ—Ç–æ —Å Telegram: {e}")
            return None
    
    def validate_photo_quality(self, image_bytes: bytes) -> Dict[str, any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
        
        Args:
            image_bytes: Bytes –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
        Returns:
            {
                "valid": bool,
                "width": int,
                "height": int,
                "file_size_mb": float,
                "aspect_ratio": str,
                "errors": list,
                "warnings": list
            }
        """
        errors = []
        warnings = []
        
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image = Image.open(io.BytesIO(image_bytes))
            width, height = image.size
            file_size_mb = len(image_bytes) / (1024 * 1024)
            
            logger.info(f"üìä –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ: {width}x{height}px, {file_size_mb:.2f}MB")
            
            # ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)
            if width < self.MIN_WIDTH or height < self.MIN_HEIGHT:
                errors.append(
                    f"‚ùå –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ ({width}x{height}px)\n"
                    f"   –ú–∏–Ω–∏–º—É–º: {self.MIN_WIDTH}x{self.MIN_HEIGHT}px"
                )
            
            if file_size_mb > self.MAX_FILE_SIZE_MB:
                errors.append(
                    f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size_mb:.1f}MB)\n"
                    f"   –ú–∞–∫—Å–∏–º—É–º: {self.MAX_FILE_SIZE_MB}MB"
                )
            
            # ‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø (–ø—Ä–∏–Ω–∏–º–∞–µ–º, –Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º)
            if width < self.RECOMMENDED_WIDTH or height < self.RECOMMENDED_HEIGHT:
                warnings.append(
                    f"‚ö†Ô∏è –§–æ—Ç–æ –º–µ–Ω—å—à–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–≥–æ ({width}x{height}px)\n"
                    f"   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: {self.RECOMMENDED_WIDTH}x{self.RECOMMENDED_HEIGHT}px –∏–ª–∏ –±–æ–ª—å—à–µ"
                )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
            aspect_ratio = self._calculate_aspect_ratio(width, height)
            
            if aspect_ratio not in ["16:9", "9:16", "1:1"]:
                warnings.append(
                    f"‚ö†Ô∏è –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω: {aspect_ratio}\n"
                    f"   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 16:9 (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ), 9:16 (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ), 1:1 (–∫–≤–∞–¥—Ä–∞—Ç)"
                )
            
            # Telegram —Å–∂–∞—Ç–∏–µ
            if width == 1280 or height == 1280:
                warnings.append(
                    "üí° –§–æ—Ç–æ —Å–∂–∞—Ç–æ Telegram'–æ–º –¥–æ 1280px\n"
                    "   –î–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–π —Ñ–æ—Ç–æ –∫–∞–∫ –î–û–ö–£–ú–ï–ù–¢ (–±–µ–∑ —Å–∂–∞—Ç–∏—è)"
                )
            
            return {
                "valid": len(errors) == 0,
                "width": width,
                "height": height,
                "file_size_mb": round(file_size_mb, 2),
                "aspect_ratio": aspect_ratio,
                "errors": errors,
                "warnings": warnings
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ç–æ: {e}")
            return {
                "valid": False,
                "errors": [f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {str(e)}"],
                "warnings": []
            }
    
    def _calculate_aspect_ratio(self, width: int, height: int) -> str:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        from math import gcd
        
        divisor = gcd(width, height)
        ratio_w = width // divisor
        ratio_h = height // divisor
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–∏–∑–æ—Å—Ç—å –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è–º (—Å –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å—é 5%)
        for ratio_name, (std_w, std_h) in self.SUPPORTED_RATIOS.items():
            if abs(ratio_w / ratio_h - std_w / std_h) < 0.05:
                return ratio_name
        
        return f"{ratio_w}:{ratio_h}"
    
    async def upload_to_replicate(self, image_bytes: bytes) -> Optional[str]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Replicate File API
        
        Args:
            image_bytes: Bytes –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
        Returns:
            URL —Ñ–∞–π–ª–∞ –Ω–∞ Replicate –∏–ª–∏ None –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        if not self.replicate_token:
            logger.error("‚ùå REPLICATE_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return None
        
        try:
            import io
            
            # –°–æ–∑–¥–∞–µ–º file-like –æ–±—ä–µ–∫—Ç –∏–∑ bytes
            file_obj = io.BytesIO(image_bytes)
            file_obj.name = "image.jpg"
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–µ–∑ Replicate Files API
            loop = asyncio.get_event_loop()
            file_response = await loop.run_in_executor(
                None,
                lambda: replicate.files.create(file_obj)
            )
            
            # –ü–æ–ª—É—á–∞–µ–º URL –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
            file_url = file_response.urls.get("get")  # –ú–µ—Ç–æ–¥ get() —Ç—Ä–µ–±—É–µ—Ç –∫–ª—é—á "get"
            logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ Replicate: {file_url}")
            return file_url
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞ Replicate: {e}")
            return None
    
    async def upload_to_imgbb(self, image_bytes: bytes, image_name: str = "photo") -> Optional[str]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ ImgBB –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL
        
        Args:
            image_bytes: Bytes –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_name: –ò–º—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
        Returns:
            URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ ImgBB –∏–ª–∏ None –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        if not self.imgbb_api_key:
            logger.error("‚ùå IMGBB_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
            return None
        
        try:
            files = {
                'image': (f'{image_name}.jpg', image_bytes, 'image/jpeg')
            }
            data = {
                'key': self.imgbb_api_key,
                'name': image_name
            }
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ loop.run_in_executor
            loop = asyncio.get_event_loop()
            response = await loop.run_in_executor(
                None,
                lambda: requests.post(self.imgbb_url, files=files, data=data, timeout=60)  # ‚è±Ô∏è –£–≤–µ–ª–∏—á–µ–Ω timeout
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get("success"):
                    image_url = result["data"]["url"]
                    logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ ImgBB: {image_url}")
                    return image_url
                else:
                    logger.error(f"‚ùå ImgBB –æ—à–∏–±–∫–∞: {result.get('error', {}).get('message', 'Unknown')}")
                    return None
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ ImgBB: —Å—Ç–∞—Ç—É—Å {response.status_code}")
                logger.error(f"   –û—Ç–≤–µ—Ç: {response.text[:200]}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞ ImgBB: {e}")
            return None
    
    async def process_telegram_photo(self, bot: Bot, file_id: str, photo_name: str = "photo") -> Optional[str]:
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ —Å Telegram –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞ Replicate (–∏–ª–∏ ImgBB –∫–∞–∫ fallback)
        
        Args:
            bot: Aiogram Bot instance
            file_id: Telegram file_id
            photo_name: –ò–º—è —Ñ–æ—Ç–æ –¥–ª—è ImgBB (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ fallback)
            
        Returns:
            Public URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ None –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            logger.info(f"üì• –°–∫–∞—á–∏–≤–∞—é —Ñ–æ—Ç–æ —Å Telegram...")
            photo_bytes = await self.download_telegram_photo(bot, file_id)
            
            if not photo_bytes:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ —Å Telegram")
                return None
            
            # üéØ –ü–†–ò–û–†–ò–¢–ï–¢ 1: Replicate File API (–Ω–∞–¥–µ–∂–Ω–µ–µ –∏ –±—ã—Å—Ç—Ä–µ–µ)
            logger.info(f"‚òÅÔ∏è –ó–∞–≥—Ä—É–∂–∞—é —Ñ–æ—Ç–æ –Ω–∞ Replicate...")
            replicate_url = await self.upload_to_replicate(photo_bytes)
            
            if replicate_url:
                logger.info(f"‚úÖ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ Replicate: {replicate_url}")
                return replicate_url
            
            # üîÑ FALLBACK: ImgBB (–µ—Å–ª–∏ Replicate –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª)
            logger.warning("‚ö†Ô∏è Replicate –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É—é ImgBB –∫–∞–∫ fallback...")
            logger.info(f"‚òÅÔ∏è –ó–∞–≥—Ä—É–∂–∞—é —Ñ–æ—Ç–æ –Ω–∞ ImgBB...")
            imgbb_url = await self.upload_to_imgbb(photo_bytes, photo_name)
            
            if imgbb_url:
                logger.info(f"‚úÖ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ ImgBB: {imgbb_url}")
                return imgbb_url
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –Ω–∏ –Ω–∞ Replicate, –Ω–∏ –Ω–∞ ImgBB")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
            return None