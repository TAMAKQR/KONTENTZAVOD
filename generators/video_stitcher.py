"""–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ —Å –ø–ª–∞–≤–Ω—ã–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏"""
import asyncio
import logging
from typing import List, Optional
from pathlib import Path
import requests
from moviepy.editor import (
    VideoFileClip, concatenate_videoclips, CompositeVideoClip,
    vfx, CompositeAudioClip
)
from PIL import Image
import io

logger = logging.getLogger(__name__)


class VideoStitcher:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ —Å –ø–ª–∞–≤–Ω—ã–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏"""
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
    TRANSITION_DURATION = 0.5  # 0.5 —Å–µ–∫—É–Ω–¥—ã
    TRANSITION_TYPE = "cross_fade"  # cross_fade –∏–ª–∏ dissolve
    
    def __init__(self, temp_dir: str = "temp_videos", output_dir: str = "output_videos"):
        self.temp_dir = Path(temp_dir)
        self.output_dir = Path(output_dir)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        self.temp_dir.mkdir(exist_ok=True)
        self.output_dir.mkdir(exist_ok=True)

    async def download_video(self, url: str, filename: str) -> Optional[str]:
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –ø–æ URL
        
        Args:
            url: URL –≤–∏–¥–µ–æ
            filename: –ò–º—è —Ñ–∞–π–ª–∞
            
        Returns:
            –ü—É—Ç—å –∫ —Å–∫–∞—á–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None
        """
        try:
            filepath = self.temp_dir / filename
            
            logger.info(f"üì• –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ: {filename}")
            logger.info(f"   URL: {url[:80]}...")
            
            response = requests.get(url, stream=True, timeout=60)
            response.raise_for_status()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            total_size = int(response.headers.get('content-length', 0))
            logger.info(f"   –†–∞–∑–º–µ—Ä: {total_size / (1024*1024):.2f} MB")
            
            downloaded = 0
            with open(filepath, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    if chunk:
                        f.write(chunk)
                        downloaded += len(chunk)
                        if total_size:
                            progress = (downloaded / total_size) * 100
                            if int(progress) % 20 == 0:  # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 20%
                                logger.info(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%")
            
            file_size = filepath.stat().st_size
            logger.info(f"‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ: {filename} ({file_size / (1024*1024):.2f} MB)")
            return str(filepath)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ {filename}")
            logger.error(f"   –û—à–∏–±–∫–∞: {str(e)}")
            logger.error(f"   –¢–∏–ø: {type(e).__name__}")
            return None

    async def extract_last_frame(self, video_path: str) -> Optional[str]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ—Ä–µ–π–º –∏–∑ –≤–∏–¥–µ–æ
        
        Args:
            video_path: –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ
            
        Returns:
            –ü—É—Ç—å –∫ —Ñ—Ä–µ–π–º—É –∏–ª–∏ None
        """
        try:
            video = VideoFileClip(video_path)
            last_frame = video.get_frame(video.duration - 0.1)  # –ü–æ—á—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–∞–¥—Ä
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—Ä–µ–π–º
            frame_path = self.temp_dir / f"frame_{Path(video_path).stem}.jpg"
            Image.fromarray((last_frame * 255).astype('uint8')).save(frame_path)
            
            video.close()
            logger.info(f"‚úÖ –§—Ä–µ–π–º –∏–∑–≤–ª–µ—á–µ–Ω: {frame_path.name}")
            return str(frame_path)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ—Ä–µ–π–º–∞: {e}")
            return None

    async def extract_first_frame(self, video_path: str) -> Optional[str]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–≤—ã–π —Ñ—Ä–µ–π–º –∏–∑ –≤–∏–¥–µ–æ
        
        Args:
            video_path: –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ
            
        Returns:
            –ü—É—Ç—å –∫ —Ñ—Ä–µ–π–º—É –∏–ª–∏ None
        """
        try:
            video = VideoFileClip(video_path)
            first_frame = video.get_frame(0.1)
            
            frame_path = self.temp_dir / f"first_frame_{Path(video_path).stem}.jpg"
            Image.fromarray((first_frame * 255).astype('uint8')).save(frame_path)
            
            video.close()
            logger.info(f"‚úÖ –ü–µ—Ä–≤—ã–π —Ñ—Ä–µ–π–º –∏–∑–≤–ª–µ—á–µ–Ω: {frame_path.name}")
            return str(frame_path)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Ñ—Ä–µ–π–º–∞: {e}")
            return None

    async def create_cross_fade_transition(
        self,
        clip1: VideoFileClip,
        clip2: VideoFileClip,
        duration: float = 0.5
    ) -> CompositeVideoClip:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É –¥–≤—É–º—è –≤–∏–¥–µ–æ (cross-fade)
        
        Args:
            clip1: –ü–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ
            clip2: –í—Ç–æ—Ä–æ–µ –≤–∏–¥–µ–æ
            duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            –ö–æ–º–ø–æ–∑–∏—Ç–Ω–æ–µ –≤–∏–¥–µ–æ —Å –ø–µ—Ä–µ—Ö–æ–¥–æ–º
        """
        # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è
        overlap_duration = duration
        
        # –ü–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æÊí≠Êîæ –ø–æ–ª–Ω–æ—Å—Ç—å—é, –Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 'overlap_duration' —Å–µ–∫—É–Ω–¥ –±—É–¥—É—Ç —Å —Ñ–µ–π–¥–æ–º
        clip1_faded = clip1.set_opacity(1).fx(vfx.fadeout, overlap_duration)
        
        # –í—Ç–æ—Ä–æ–µ –≤–∏–¥–µ–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ä–∞–Ω—å—à–µ, —á–µ–º –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø–µ—Ä–≤–æ–µ
        clip2_faded = clip2.set_opacity(0).fx(vfx.fadein, overlap_duration)
        clip2_delayed = clip2_faded.set_start(clip1.duration - overlap_duration)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–∑–∏—Ç
        final_clip = CompositeVideoClip(
            [clip1_faded, clip2_delayed],
            size=clip1.size
        )
        
        return final_clip

    async def stitch_videos(
        self,
        video_paths: List[str],
        output_filename: str = "final_video.mp4",
        use_transitions: bool = True,
        fps: int = 30
    ) -> Optional[str]:
        """
        –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∏–¥–µ–æ —Å –ø–ª–∞–≤–Ω—ã–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏
        
        Args:
            video_paths: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –≤–∏–¥–µ–æ
            output_filename: –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            use_transitions: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –ø–µ—Ä–µ—Ö–æ–¥—ã
            fps: FPS –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ
            
        Returns:
            –ü—É—Ç—å –∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–º—É –≤–∏–¥–µ–æ –∏–ª–∏ None
        """
        try:
            if not video_paths:
                logger.error("‚ùå –°–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ –ø—É—Å—Ç!")
                return None
            
            logger.info(f"üé¨ –ù–∞—á–∏–Ω–∞—é –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ {len(video_paths)} –≤–∏–¥–µ–æ...")
            for i, path in enumerate(video_paths, 1):
                logger.info(f"   {i}. {Path(path).name}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
            clips = []
            total_duration = 0
            
            for i, path in enumerate(video_paths):
                try:
                    logger.info(f"üìΩÔ∏è –ó–∞–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ {i+1}: {Path(path).name}...")
                    clip = VideoFileClip(path)
                    duration = clip.duration
                    total_duration += duration
                    clips.append(clip)
                    logger.info(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {duration:.2f} —Å–µ–∫")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {Path(path).name}: {e}")
                    continue
            
            if not clips:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ!")
                return None
            
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(clips)} –≤–∏–¥–µ–æ (–≤—Å–µ–≥–æ: {total_duration:.2f} —Å–µ–∫)")
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏
            if use_transitions and len(clips) > 1:
                logger.info(f"üé® –ü—Ä–∏–º–µ–Ω—è—é cross-fade –ø–µ—Ä–µ—Ö–æ–¥—ã (0.5 —Å–µ–∫)...")
                final_clips = [clips[0]]
                
                for i in range(1, len(clips)):
                    logger.info(f"   –ü–µ—Ä–µ—Ö–æ–¥ {i}: {clips[i-1].duration:.2f}s ‚Üí {clips[i].duration:.2f}s")
                    # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É –≤–∏–¥–µ–æ
                    transition = await self.create_cross_fade_transition(
                        clips[i - 1],
                        clips[i],
                        self.TRANSITION_DURATION
                    )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞
                    final_clips.append(clips[i])
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –ø–ª–∞–≤–Ω—ã–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏
                logger.info(f"üîó –û–±—ä–µ–¥–∏–Ω—è—é –≤–∏–¥–µ–æ —Å –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏...")
                final_video = concatenate_videoclips(final_clips, method="compose")
            else:
                # –ü—Ä–æ—Å—Ç–æ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –±–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
                logger.info(f"üîó –û–±—ä–µ–¥–∏–Ω—è—é –≤–∏–¥–µ–æ –±–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤...")
                final_video = concatenate_videoclips(clips, method="chain")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FPS
            final_video = final_video.set_fps(fps)
            final_duration = final_video.duration
            logger.info(f"‚úÖ –ò—Ç–æ–≥–æ–≤–æ–µ –≤–∏–¥–µ–æ: {final_duration:.2f} —Å–µ–∫ ({fps} FPS)")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            output_path = self.output_dir / output_filename
            logger.info(f"üíæ –ö–æ–¥–∏—Ä—É—é –≤–∏–¥–µ–æ –≤ {output_path}...")
            logger.info(f"   –ö–æ–¥–µ–∫: libx264, –ê—É–¥–∏–æ: aac")
            
            # –ö–æ–¥–∏—Ä—É–µ–º –≤–∏–¥–µ–æ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)
            loop = asyncio.get_event_loop()
            try:
                await loop.run_in_executor(
                    None,
                    lambda: final_video.write_videofile(
                        str(output_path),
                        verbose=False,
                        logger=None,
                        fps=fps,
                        codec='libx264',
                        audio_codec='aac',
                        temp_audiofile='temp-audio.m4a',
                        remove_temp=True
                    )
                )
            except Exception as encode_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {encode_error}")
                raise
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–ø—ã
            for clip in clips:
                clip.close()
            final_video.close()
            
            file_size = output_path.stat().st_size if output_path.exists() else 0
            logger.info(f"‚úÖ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ: {output_path}")
            logger.info(f"   –†–∞–∑–º–µ—Ä: {file_size / (1024*1024):.2f} MB")
            return str(output_path)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ!")
            logger.error(f"   –û—à–∏–±–∫–∞: {str(e)}")
            logger.error(f"   –¢–∏–ø: {type(e).__name__}")
            import traceback
            logger.error(f"   Traceback: {traceback.format_exc()}")
            return None

    async def cleanup_temp_files(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        try:
            for file in self.temp_dir.glob("*"):
                file.unlink()
            logger.info("‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")